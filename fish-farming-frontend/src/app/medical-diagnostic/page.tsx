'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { CheckCircle, AlertTriangle, Heart, Eye, Brain, Zap, Droplets, Activity, Fish, MapPin, Edit3, Save, X } from 'lucide-react';
import { usePonds } from '@/hooks/useApi';
import { Pond, MedicalDiagnostic } from '@/lib/api';
import { extractApiData } from '@/lib/utils';
import { api } from '@/lib/api';
import Link from 'next/link';

// Medical data from the JSON file
const medicalData = {
  organs: [
    { id: 'skin', name: 'рждрзНржмржХ (Skin)', icon: 'ЁЯй╣' },
    { id: 'eye', name: 'ржЪрзЛржЦ (Eye)', icon: 'ЁЯСБя╕П' },
    { id: 'gill', name: 'ржлрзБрж▓ржХрж╛ (Gill)', icon: 'ЁЯлБ' },
    { id: 'liver', name: 'ржпржХрзГржд (Liver)', icon: 'ЁЯлА' },
    { id: 'intestine', name: 'ржЕржирзНрждрзНрж░ (Intestine)', icon: 'ЁЯФД' },
    { id: 'spleen', name: 'ржкрзНрж▓рзАрж╣рж╛ (Spleen)', icon: 'тЭдя╕П' },
    { id: 'kidney', name: 'ржХрж┐ржбржирж┐ (Kidney)', icon: 'ЁЯлШ' },
    { id: 'swim_bladder', name: 'рж╕рзБржЗржо ржмрзНрж▓рж╛ржбрж╛рж░ (Swim bladder)', icon: 'ЁЯТи' },
    { id: 'brain', name: 'ржорж╕рзНрждрж┐рж╖рзНржХ (Brain)', icon: 'ЁЯза' },
    { id: 'muscle', name: 'ржорж╛ржВрж╕ржкрзЗрж╢рж┐ (Muscle)', icon: 'ЁЯТк' }
  ],
  conditions: {
    skin: {
      healthy: ['ржорж╕рзГржг, ржЪржХржЪржХрзЗ, ржЕржХрзНрж╖ржд ржЖржБрж╢', 'рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ рж░ржЩ', 'ржХрзЛржирзЛ ржХрзНрж╖ржд ржирзЗржЗ'],
      unhealthy: ['ржЖрж▓рж╕рж╛рж░/ржШрж╛', 'рж░ржХрзНрждржХрзНрж╖рж░ржг', 'рждрзБрж▓рзЛрж░ ржорждрзЛ ржмрзГржжрзНржзрж┐', 'рж╕рж╛ржжрж╛ ржжрж╛ржЧ', 'рж▓ржмржг ржжрж╛ржирж╛рж░ ржорждрзЛ рж╕рж╛ржжрж╛ ржжрж╛ржЧ', 'ржирзАрж▓-ржзрзВрж╕рж░ ржкрзНржпрж╛ржЪ', 'ржЪрж╛ржХрждрж┐-рж╕ржжрзГрж╢ ржЙржХрзБржи', 'рж╕рзБрждрзЛ ржХрзГржорж┐ ржЧрзЗржБржерзЗ ржЖржЫрзЗ', 'рждрзНржмржХрзЗрж░ ржирж┐ржЪрзЗ ржЧрзЛрж▓ржорж░рж┐ржЪ ржжрж╛ржЧ', 'ржЖржБрж╢ ржХрзНрж╖рждрж┐', 'ржЖржШрж╛ржд']
    },
    eye: {
      healthy: ['рж╕рзНржмржЪрзНржЫ, ржЙржЬрзНржЬрзНржмрж▓', 'рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржЖржХрж╛рж░', 'ржХрзЛржирзЛ ржлрзЛрж▓рж╛ ржирзЗржЗ'],
      unhealthy: ['ржШрзЛрж▓рж╛ржЯрзЗ', 'ржлрзЛрж▓рж╛', 'ржжрзЗржмрзЗ ржпрж╛ржУржпрж╝рж╛', 'Pop-eye', 'ржЪрзЛржЦрзЗрж░ ржЪрж╛рж░ржкрж╛рж╢рзЗ рж░ржХрзНржд', 'ржХрж░рзНржирж┐ржпрж╝рж╛ ржЕрж╕рзНржмржЪрзНржЫ', 'ржЪрзЛржЦрзЗ ржЧрзНржпрж╛рж╕ ржмрж╛ржмрж▓']
    },
    gill: {
      healthy: ['ржЙржЬрзНржЬрзНржмрж▓ рж▓рж╛рж▓', 'рж╕ржорж╛ржи ржлрж┐рж▓рж╛ржорзЗржирзНржЯ', 'рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ рж░ржЩ'],
      unhealthy: ['ржлрзНржпрж╛ржХрж╛рж╢рзЗ/рж╕рж╛ржжрж╛ (ржЕрзНржпрж╛ржирж┐ржорж┐ржпрж╝рж╛)', 'ржкрж┐ржЪрзНржЫрж┐рж▓ (ржкрзНрж░ржЯрзЛржЬрзЛржпрж╝рж╛)', 'ржХрзНрж╖ржпрж╝ (BGD)', 'рж░ржХрзНрждржХрзНрж╖рж░ржг (ржХрж▓рж╛ржоржирж╛рж░рж┐рж╕)', 'ржмрж╛ржжрж╛ржорзА ржирзЗржХрзНрж░рзЛрж╕рж┐рж╕', 'ржлрзБрж▓ржХрж╛ ржЫрзЗржБржбрж╝рж╛', 'рж╕рзБрждрзЛ ржХрзГржорж┐', 'рж╣рж╛ржБржлрж╛ржЪрзНржЫрзЗ', 'ржнрж╛рж░рзА ржорж┐ржЙржХрж╛рж╕', 'ржХрж╕рзНржЯрж┐ржпрж╝рж╛ рж╕рж╛ржЗржи', 'ржлрзБрж▓ржХрж╛ ржкрзБрж░рзБ', 'рж▓рж╛рж▓ржЪрзЗ-ржмрж╛ржжрж╛ржорзА рж╕рзНрждрж░']
    },
    liver: {
      healthy: ['рж▓рж╛рж▓ржЪрзЗ-ржмрж╛ржжрж╛ржорж┐', 'ржорж╕рзГржг', 'рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржЖржХрж╛рж░'],
      unhealthy: ['ржлрзНржпрж╛ржХрж╛рж╢рзЗ', 'ржлрзНржпрж╛ржЯрж┐ рж▓рж┐ржнрж╛рж░', 'ржлрзЛрж▓рж╛', 'ржЧрзБржЯрж┐/ржиржбрж┐ржЙрж▓', 'рж░ржХрзНрждржХрзНрж╖рж░ржг', 'рж╣рж▓рзБржж, рждрзЗрж▓рждрзЗрж▓рзЗ', 'ржкрж┐рждрзНржд ржмржбрж╝', 'ржЕрзНржпрж╛ржмрж╕рзЗрж╕']
    },
    intestine: {
      healthy: ['ржжрзГржврж╝', 'рж╣ржЬржоржХрзГржд ржЦрж╛ржжрзНржпрзЗ ржкрзВрж░рзНржг', 'рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ рж░ржЩ'],
      unhealthy: ['ржЦрж╛рж▓рж┐', 'рж╕рж╛ржжрж╛ ржорж▓', 'ржлрзЛрж▓рж╛', 'ржорж┐ржЙржХрж╛рж╕рзЗ ржнрж░рж╛', 'рж▓рж╛рж▓, ржЧрзНржпрж╛рж╕', 'ржжрзБрж░рзНржЧржирзНржз', 'ржжрзЗржпрж╝рж╛рж▓ ржкрж╛рждрж▓рж╛', 'рж╕рж╛ржжрж╛ рж╕рзБрждрзЛ ржХрзГржорж┐', 'ржЕржирзНрждрзНрж░ ржлрзНржпрж╛ржХрж╛рж╢рзЗ']
    },
    spleen: {
      healthy: ['ржЫрзЛржЯ', 'рж▓рж╛рж▓ржЪрзЗ', 'рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржЖржХрж╛рж░'],
      unhealthy: ['ржмржбрж╝ ржУ ржЧрж╛ржврж╝/ржХрж╛рж▓ржЪрзЗ', 'ржлрзЛрж▓рж╛', 'рж░ржХрзНрждржХрзНрж╖рж░ржг', 'ржкрж┐ржЯрзЗржХрж┐ржпрж╝рж╛рж▓', 'ржЦрзБржм ржмржбрж╝']
    },
    kidney: {
      healthy: ['ржжрзГржврж╝', 'рж▓рж╛рж▓ржЪрзЗ', 'рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржЖржХрж╛рж░'],
      unhealthy: ['ржлрзЛрж▓рж╛', 'ржХрж╛рж▓ржЪрзЗ', 'рж░ржХрзНрждржХрзНрж╖рж░ржгржпрзБржХрзНржд', 'ржкрж┐ржЯрзЗржХрж┐ржпрж╝рж╛рж▓', 'ржЕрзНржпрж╛ржмрж╕рзЗрж╕']
    },
    swim_bladder: {
      healthy: ['рж╕рзНржмржЪрзНржЫ', 'рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХржнрж╛ржмрзЗ ржлрзБрж▓рзЗ ржерж╛ржХрж╛', 'рж╕ржарж┐ржХ ржЖржХрж╛рж░'],
      unhealthy: ['ржлрзЗржЯрзЗ ржпрж╛ржУржпрж╝рж╛', 'ржЧрзНржпрж╛рж╕ ржмрж╛ржмрж▓', 'ржПржХржжрж┐ржХрзЗ ржнрж╛рж╕рзЗ', 'ржбрзБржмрзЗ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ ржирж╛']
    },
    brain: {
      healthy: ['рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ', 'ржлрзЛрж▓рж╛ ржиржпрж╝', 'рж╕ржарж┐ржХ ржЖржХрж╛рж░'],
      unhealthy: ['ржкрзНрж░ржжрж╛рж╣', 'рж░ржХрзНрждржХрзНрж╖рж░ржг', 'ржШрзВрж░рзНржгрж┐/рж╕рзНржкрж╛ржЗрж░рж╛рж▓ рж╕рж╛ржБрждрж╛рж░', 'рж╕рзНржирж╛ржпрж╝ржмрж┐ржХ рж╕рж╛ржЗржи', 'ржЦрж┐ржБржЪрзБржирж┐']
    },
    muscle: {
      healthy: ['ржжрзГржврж╝', 'рж╕рж╛ржжрж╛', 'рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржЯрзЗржХрзНрж╕ржЪрж╛рж░'],
      unhealthy: ['ржирж░ржо', 'рж░ржХрзНрждржХрзНрж╖рж░ржгрзЗрж░ ржжрж╛ржЧ', 'рж╕рж┐рж╕рзНржЯ', 'ржЕржЩрзНржЧ/ржорж╛ржВрж╕рзЗ рж╕рж┐рж╕рзНржЯ', 'ржкрж╛ржЦржирж╛ ржнржЩрзНржЧрзБрж░', 'ржХрзНрж╖ржд рж╕рж╛рж░рждрзЗ ржжрзЗрж░рж┐']
    }
  },
  diseases: [
    {
      id: 'do_crash',
      name: 'DO ржХрзНрж░рзНржпрж╛рж╢/рж╣рж╛ржЗржкрзЛржХрзНрж╕рж┐ржпрж╝рж╛',
      symptoms: ['ржлрзБрж▓ржХрж╛ ржлрзНржпрж╛ржХрж╛рж╢рзЗ', 'ржЙржкрж░рзЗ ржнрзЗрж╕рзЗ рж╢рзНржмрж╛рж╕', 'ржЗржирж▓рзЗржЯрзЗ ржнрж┐ржбрж╝', 'ржнрзЛрж░рзЗ ржорзГрждрзНржпрзБ'],
      treatment: 'Aerator (ржПржпрж╝рж╛рж░рзЗржЯрж░), Water exchange (ржкрж╛ржирж┐ ржкрж░рж┐ржмрж░рзНрждржи), Agricultural Lime (ржХрзГрж╖рж┐ ржЪрзБржи/ржХрзНржпрж╛рж▓рж╕рж┐ржпрж╝рж╛ржо ржХрж╛рж░рзНржмрзЛржирзЗржЯтАФCaCOтВГ)',
      dosage: 'ржПржпрж╝рж╛рж░рзЗржЯрж░ рж╕рж╛ржерзЗ рж╕рж╛ржерзЗржЗ; ржкрж╛ржирж┐ рзирзжтАУрзйрзж% ржмржжрж▓; ржЪрзБржи рззтАУрзи ржХрзЗржЬрж┐/ржбрзЗрж╕рж┐ржорзЗрж▓ (рж╕ржирзНржзрзНржпрж╛ржпрж╝); DO >5 mg/L; рзирзк ржШржирзНржЯрж╛ ржЦрж╛ржмрж╛рж░ ржХржорж╛ржирзЛ'
    },
    {
      id: 'ammonia_toxicity',
      name: 'ржЕрзНржпрж╛ржорзЛржирж┐ржпрж╝рж╛/ржирж╛ржЗржЯрзНрж░рж╛ржЗржЯ ржЯржХрзНрж╕рж┐рж╕рж┐ржЯрж┐',
      symptoms: ['рж╢рзИржмрж╛рж▓ ржорж░рж╛рж░ ржкрж░ ржлрзБрж▓ржХрж╛ ржмрж╛ржжрж╛ржорзА', 'ржжрзБрж░рзНржЧржирзНржз', 'ржЕрж▓рж╕рждрж╛'],
      treatment: 'Zeolite (ржЬрж┐ржУрж▓рж╛ржЗржЯ), Salt тАУ NaCl (рж▓ржмржг), Water exchange (ржкрж╛ржирж┐ ржмржжрж▓), Reduce feed (ржЦрж╛ржмрж╛рж░ ржХржорж╛ржирзЛ)',
      dosage: 'ржЬрж┐ржУрж▓рж╛ржЗржЯ рзитАУрзй ржХрзЗржЬрж┐/ржбрзЗрж╕рж┐ржорзЗрж▓; рж▓ржмржг рззтАУрзи ржХрзЗржЬрж┐/ржбрзЗрж╕рж┐ржорзЗрж▓; рзйрзжтАУрзлрзж% ржкрж╛ржирж┐ ржмржжрж▓; рзирзктАУрзкрзо ржШржирзНржЯрж╛ ржЦрж╛ржмрж╛рж░ ржмржирзНржз/ржХржо'
    },
    {
      id: 'trichodina',
      name: 'Trichodina spp.',
      symptoms: ['ржЕрждрж┐рж░рж┐ржХрзНржд ржорж┐ржЙржХрж╛рж╕', 'ржЧрж╛ ржШрж╖рж╛', 'ржорж╛ржЗржХрзНрж░рзЛрж╕рзНржХрзЛржкрзЗ ржЪрж╛ржХрждрж┐-ржЪрж╛ржХрж╛рж░ ржорждрзЛ'],
      treatment: 'Salt dip (рж▓ржмржг ржбрж┐ржк), Potassium PermanganateтАФKMnOтВД (ржкржЯрж╛рж╢рж┐ржпрж╝рж╛ржо ржкрж╛рж░ржорзНржпрж╛ржЩрзНржЧрж╛ржирзЗржЯ), Formalin (ржлрж░ржорж╛рж▓рж┐ржи; ржЖржЗржирж┐ рж╣рж▓рзЗ)',
      dosage: 'рж▓ржмржг ржбрж┐ржк рзитАУрзй% рзлтАУрззрзж ржорж┐ржирж┐ржЯ; KMnOтВД рзитАУрзй ржЧрзНрж░рж╛/ржбрзЗрж╕рж┐ржорзЗрж▓; ржлрж░ржорж╛рж▓рж┐ржи рзирзл ppm ржкрзБрж░рзЛ ржкрзБржХрзБрж░'
    },
    {
      id: 'dactylogyrus',
      name: 'Dactylogyrus/Gyrodactylus (ржлрзНрж▓рзБржХ)',
      symptoms: ['ржлрзБрж▓ржХрж╛ ржЫрзЗржБржбрж╝рж╛', 'рж╕рзБрждрзЛ ржХрзГржорж┐', 'рж╣рж╛ржБржлрж╛ржЪрзНржЫрзЗ'],
      treatment: 'Praziquantel (ржкрзНрж░рж╛ржЬрж┐ржХрзЛржпрж╝рж╛ржирзНржЯрзЗрж▓), Salt (рж▓ржмржг), KMnOтВД (ржкржЯрж╛рж╢)',
      dosage: 'ржкрзНрж░рж╛ржЬрж┐ржХрзЛржпрж╝рж╛ржирзНржЯрзЗрж▓ рзитАУрзл mg/L ржмрж╛рже ржмрж╛ рззрзжтАУрзирзж mg/kg ржлрж┐ржб ├ЧрзйтАУрзл ржжрж┐ржи; рж▓ржмржг рззтАУрзи ржХрзЗржЬрж┐/ржбрзЗрж╕рж┐ржорзЗрж▓; KMnOтВД рзи ржЧрзНрж░рж╛/ржбрзЗрж╕рж┐ржорзЗрж▓'
    },
    {
      id: 'ich',
      name: 'Ich (ржЗржЪ/рж╕рж╛ржжрж╛ ржжрж╛ржЧ)',
      symptoms: ['рждрзНржмржХ/ржкрж╛ржЦржирж╛ржпрж╝ рж▓ржмржг ржжрж╛ржирж╛рж░ ржорждрзЛ рж╕рж╛ржжрж╛ ржжрж╛ржЧ'],
      treatment: 'Formalin (ржлрж░ржорж╛рж▓рж┐ржи) + Malachite Green (ржорзНржпрж╛рж▓рж╛ржХрж╛ржЗржЯ ржЧрзНрж░рж┐ржи), Salt (рж▓ржмржг), KMnOтВД (ржкржЯрж╛рж╢)',
      dosage: 'ржлрж░ржорж╛рж▓рж┐ржи рзирзл ppm рзз ржШржирзНржЯрж╛ рж╢ржХрзНржд ржПржпрж╝рж╛рж░рзЗрж╢ржирзЗ ├Чрзй (рзкрзо ржШржирзНржЯрж╛ ржЕржирзНрждрж░); ржмрж╛ рж▓ржмржг рзйтАУрзл% ржбрж┐ржк рзлтАУрззрзж ржорж┐ржирж┐ржЯ; KMnOтВД рзи ржЧрзНрж░рж╛/ржбрзЗрж╕рж┐ржорзЗрж▓'
    },
    {
      id: 'costia',
      name: 'Costia/Ichthyobodo',
      symptoms: ['ржирзАрж▓-ржзрзВрж╕рж░ ржкрзНржпрж╛ржЪ', 'ржнрж╛рж░рзА ржорж┐ржЙржХрж╛рж╕', 'ржХрж╕рзНржЯрж┐ржпрж╝рж╛ рж╕рж╛ржЗржи'],
      treatment: 'Salt (рж▓ржмржг), KMnOтВД (ржкржЯрж╛рж╢), Formalin (ржлрж░ржорж╛рж▓рж┐ржи; ржЖржЗржирж┐ рж╣рж▓рзЗ)',
      dosage: 'рж▓ржмржг ржбрж┐ржк рзйтАУрзл% рзлтАУрззрзж ржорж┐ржирж┐ржЯ; KMnOтВД рзитАУрзй ржЧрзНрж░рж╛/ржбрзЗрж╕рж┐ржорзЗрж▓; рзкрзотАУрзнрзи ржШржирзНржЯрж╛ ржкрж░ рж░рж┐-ржбрзЛржЬ'
    },
    {
      id: 'bacterial_ulcer',
      name: 'Bacterial Ulcer (Aeromonas/Pseudomonas)',
      symptoms: ['рж▓рж╛рж▓ ржкрзНрж░рж╛ржирзНрждрж╕рж╣ ржЖрж▓рж╕рж╛рж░', 'ржЖржБрж╢ ржЭрж░рж╛'],
      treatment: 'OxytetracyclineтАФOTC (ржЕржХрзНрж╕рж┐ржЯрзЗржЯрзНрж░рж╛рж╕рж╛ржЗржХрзНрж▓рж┐ржи), Florfenicol (ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓), KMnOтВД (ржкржЯрж╛рж╢)',
      dosage: 'OTC рзлрзжтАУрзнрзл mg/kg/ржжрж┐ржи ├ЧрзлтАУрзн ржжрж┐ржи; ржмрж╛ ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓ рззрзжтАУрззрзл mg/kg/ржжрж┐ржи ├Чрзл ржжрж┐ржи; KMnOтВД рзи ржЧрзНрж░рж╛/ржбрзЗрж╕рж┐ржорзЗрж▓'
    },
    {
      id: 'saprolegnia',
      name: 'Saprolegnia (ржЫрждрзНрж░рж╛ржХ)',
      symptoms: ['рждрзБрж▓рж╛рж░ ржорждрзЛ рж╕рж╛ржжрж╛ ржЧрзБржЪрзНржЫ'],
      treatment: 'KMnOтВД (ржкржЯрж╛рж╢), Salt (рж▓ржмржг), Povidone-Iodine (ржкрзЛржнрж┐ржбрзЛржи-ржЖржпрж╝рзЛржбрж┐ржи)',
      dosage: 'KMnOтВД рзитАУрзй ржЧрзНрж░рж╛/ржбрзЗрж╕рж┐ржорзЗрж▓; рж▓ржмржг рззтАУрзи ржХрзЗржЬрж┐/ржбрзЗрж╕рж┐ржорзЗрж▓; ржХрзНрж╖рждрзЗ ржЖржпрж╝рзЛржбрж┐ржи ржмрзНрж░рж╛рж╢'
    },
    {
      id: 'algal_crash',
      name: 'Algal crash/HтВВS ржПржХрзНрж╕ржкрзЛржЬрж╛рж░',
      symptoms: ['рж╕ржмрзБржЬ ржкрж┐ржЪрзНржЫрж┐рж▓', 'ржХржо DO-рждрзЗ ржХрж╛рж▓рзЛ ржкрзНржпрж╛ржЪ'],
      treatment: 'Aeration (ржПржпрж╝рж╛рж░рзЗрж╢ржи), Water exchange (ржкрж╛ржирж┐ ржмржжрж▓), Agricultural Lime (ржХрзГрж╖рж┐ ржЪрзБржи)',
      dosage: 'ржЬрж░рзБрж░рж┐ ржПржпрж╝рж╛рж░рзЗрж╢ржи; рзйрзжтАУрзлрзж% ржкрж╛ржирж┐ ржмржжрж▓; ржЪрзБржи рззтАУрзи ржХрзЗржЬрж┐/ржбрзЗрж╕рж┐ржорзЗрж▓; ржХрж╛рж▓рзЛ рж╕рзНрж▓рж╛ржЬ ржирж╛ржбрж╝рж╛ржирзЛ ржПржбрж╝рж╛ржи'
    },
    {
      id: 'argulus',
      name: 'Argulus (ржорж╛ржЫрзЗрж░ ржЙржХрзБржи)',
      symptoms: ['рждрзНржмржХрзЗ ржЪрж╛ржХрждрж┐-рж╕ржжрзГрж╢ ржЙржХрзБржи'],
      treatment: 'Trichlorfon/Dipterex (ржЯрзНрж░рж╛ржЗржХрзНрж▓рзЛрж░ржлржи), Salt dip (рж▓ржмржг ржбрж┐ржк)',
      dosage: 'ржЯрзНрж░рж╛ржЗржХрзНрж▓рзЛрж░ржлржи рзж.рзирзлтАУрзж.рзл mg/L; рзнтАУрззрзж ржжрж┐ржирзЗ рж░рж┐ржкрж┐ржЯ; рж▓ржмржг ржбрж┐ржк рзйтАУрзл% рзлтАУрззрзж ржорж┐ржирж┐ржЯ'
    },
    {
      id: 'lernaea',
      name: 'Lernaea (ржЕрзНржпрж╛ржЩрзНржХрж░ ржУржпрж╝рж╛рж░рзНржо)',
      symptoms: ['рж╕рзБрждрзЛ ржХрзГржорж┐ ржЧрзЗржБржерзЗ ржЖржЫрзЗ', 'рж╕рзНржерж╛ржирзЗ рж▓рж╛рж▓ржЪрзЗ ржжрж╛ржЧ'],
      treatment: 'Manual removal (рж╣рж╛рждрзЗ ржЯрзЗржирзЗ рждрзЛрж▓рж╛) + Iodine (ржЖржпрж╝рзЛржбрж┐ржи), Trichlorfon (ржЯрзНрж░рж╛ржЗржХрзНрж▓рзЛрж░ржлржи)',
      dosage: 'ржХрзГржорж┐ ржЯрзЗржирзЗ ржмрзЗрж░ ржХрж░рзЗ ржЖржпрж╝рзЛржбрж┐ржи; ржЯрзНрж░рж╛ржЗржХрзНрж▓рзЛрж░ржлржи рзж.рзирзлтАУрзж.рзл mg/L; рззрзжтАУрззрзк ржжрж┐ржирзЗ рж░рж┐ржкрж┐ржЯ'
    },
    {
      id: 'septicemia',
      name: 'Septicemia/ Gas supersaturation',
      symptoms: ['Pop-eye', 'ржЪрзЛржЦрзЗрж░ ржЪрж╛рж░ржкрж╛рж╢рзЗ рж░ржХрзНржд'],
      treatment: 'Florfenicol (ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓), Water improvement (ржкрж╛ржирж┐ ржЙржирзНржиржпрж╝ржи)',
      dosage: 'ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓ рззрзжтАУрззрзл mg/kg/ржжрж┐ржи ├Чрзл ржжрж┐ржи; рж╕рзБржкрж╛рж░рж╕рзНржпрж╛ржЪрзБрж░рзЗрж╢ржи ржХржорж╛ржи; ржирж░ржо ржкрж╛ржирж┐ ржмржжрж▓'
    },
    {
      id: 'toxicity',
      name: 'Toxicity/Neurological stress',
      symptoms: ['ржШрзВрж░рзНржгрж┐/рж╕рзНржкрж╛ржЗрж░рж╛рж▓ рж╕рж╛ржБрждрж╛рж░', 'ржмрж╛рж╣рзНржпрж┐ржХ ржХрзНрж╖ржд ржирзЗржЗ'],
      treatment: 'Water exchange (ржкрж╛ржирж┐ ржмржжрж▓), Activated Carbon (ржЕрзНржпрж╛ржХрзНржЯрж┐ржнрзЗржЯрзЗржб ржХрж╛рж░рзНржмржи), Stop feeding',
      dosage: 'рзлрзжтАУрзорзж% ржкрж╛ржирж┐ ржмржжрж▓; ржЗржиржлрзНрж▓рзЛ рж╕рзНржХрзНрж░рж┐ржирзЗ ржХрж╛рж░рзНржмржи рззрзжтАУрзирзж ржЧрзНрж░рж╛/ржорж┐┬│; ржЙрзОрж╕ ржЦрзБржБржЬрзЗ рж╕ржорж╛ржзрж╛ржи'
    },
    {
      id: 'chronic_starvation',
      name: 'Chronic starvation/Anemia',
      symptoms: ['рж▓рж┐ржнрж╛рж░ ржлрзНржпрж╛ржХрж╛рж╢рзЗ', 'ржкрж┐рждрзНржд ржмржбрж╝', 'ржЕржирзНрждрзНрж░ ржЦрж╛рж▓рж┐'],
      treatment: 'Quality Feed (ржнрж╛рж▓рзЛ ржлрж┐ржб), VitaminтАУMineral Premix (ржнрж┐ржЯ-ржорж┐ржи ржкрзНрж░рж┐ржорж┐ржХрзНрж╕)',
      dosage: 'ржЧрзНрж░рзЛржпрж╝рж╛рж░ ржкрзНрж░рзЛржЯрж┐ржи рзирзотАУрзйрзи%; Vit C рзлрзжрзжтАУрззрзжрзжрзж mg/kg ржлрж┐ржб'
    },
    {
      id: 'fatty_liver',
      name: 'Fatty Liver (рж╣рзЗржкрж╛ржЯрж┐ржХ рж▓рж┐ржкрж┐ржбрзЛрж╕рж┐рж╕)',
      symptoms: ['рж▓рж┐ржнрж╛рж░ ржмржбрж╝', 'рж╣рж▓рзБржж', 'рждрзЗрж▓рждрзЗрж▓рзЗ'],
      treatment: 'Reduce ration (рж░рзЗрж╢ржи ржХржорж╛ржирзЛ), Probiotics (ржкрзНрж░рзЛржмрж╛ржпрж╝рзЛржЯрж┐ржХ), Vitamin E + Selenium (ржнрж┐ржЯ E + рж╕рзЗрж▓рзЗржирж┐ржпрж╝рж╛ржо)',
      dosage: 'ржЦрж╛ржмрж╛рж░ рзирзжтАУрзйрзж% ржХржо рззтАУрзи рж╕ржкрзНрждрж╛рж╣; Vit E рззрзжрзжтАУрзирзжрзж mg/kg + Se рзж.рзй mg/kg; ржкрзНрж░рзЛржмрж╛ржпрж╝рзЛржЯрж┐ржХ рж▓рзЗржмрзЗрж▓ржорждрзЛ'
    },
    {
      id: 'bacterial_septicemia',
      name: 'Bacterial Septicemia',
      symptoms: ['рж▓рж┐ржнрж╛рж░/ржХрж┐ржбржирж┐рждрзЗ ржкрж┐ржЯрзЗржХрж┐ржпрж╝рж╛рж▓', 'ржкрзНрж▓рзАрж╣рж╛ ржмржбрж╝', 'ржЕрзНржпрж╛рж╕рж╛ржЗржЯрж┐рж╕'],
      treatment: 'Oxytetracycline (ржЕржХрзНрж╕рж┐ржЯрзЗржЯрзНрж░рж╛рж╕рж╛ржЗржХрзНрж▓рж┐ржи) / Florfenicol (ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓), KMnOтВД (ржкржЯрж╛рж╢)',
      dosage: 'OTC рзлрзжтАУрзнрзл mg/kg/ржжрж┐ржи ├ЧрзлтАУрзн; ржмрж╛ ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓ рззрзжтАУрззрзл mg/kg/ржжрж┐ржи ├Чрзл; KMnOтВД рзи ржЧрзНрж░рж╛/ржбрзЗрж╕рж┐ржорзЗрж▓'
    },
    {
      id: 'bacterial_enteritis',
      name: 'Bacterial Enteritis',
      symptoms: ['ржЕржирзНрждрзНрж░ рж▓рж╛рж▓', 'ржЧрзНржпрж╛рж╕', 'ржжрзБрж░рзНржЧржирзНржз', 'ржжрзЗржпрж╝рж╛рж▓ ржкрж╛рждрж▓рж╛'],
      treatment: 'Oxytetracycline (ржЕржХрзНрж╕рж┐ржЯрзЗржЯрзНрж░рж╛рж╕рж╛ржЗржХрзНрж▓рж┐ржи), Probiotics (ржкрзНрж░рзЛржмрж╛ржпрж╝рзЛржЯрж┐ржХ)',
      dosage: 'OTC рзлрзжтАУрзнрзл mg/kg/ржжрж┐ржи ├Чрзл; ржкрзНрж░рзЛржмрж╛ржпрж╝рзЛржЯрж┐ржХ рж▓рзЗржмрзЗрж▓ржорждрзЛ; рж░рзЗрж╢ржи рзирзжтАУрзйрзж% ржХржо'
    },
    {
      id: 'intestinal_nematodes',
      name: 'Intestinal Nematodes',
      symptoms: ['ржЕржирзНрждрзНрж░рзЗ ржорж┐ржЙржХрж╛рж╕', 'рж╕рж╛ржжрж╛ рж╕рзБрждрзЛ ржХрзГржорж┐'],
      treatment: 'Levamisole (рж▓рзЗржнрж╛ржорж┐рж╕рзЛрж▓)/Piperazine (ржкрж╛ржЗржкрзЗрж░рж╛ржЬрж┐ржи)/Fenbendazole (ржлрзЗржиржмрзЗржиржбрж╛ржЬрж▓)',
      dosage: 'рж▓рзЗржнрж╛ржорж┐рж╕рзЛрж▓ рззрзж mg/kg ржПржХржмрж╛рж░, рзнтАУрззрзж ржжрж┐ржирзЗ рж░рж┐ржкрж┐ржЯ; ржмрж╛ ржлрзЗржиржмрзЗржиржбрж╛ржЬрж▓ рззрзж mg/kg/ржжрж┐ржи ├Чрзй'
    },
    {
      id: 'cestodes',
      name: 'Cestodes (Metacestodes)',
      symptoms: ['ржЕржЩрзНржЧ/ржорж╛ржВрж╕рзЗ рж╕рж┐рж╕рзНржЯ', 'ржЫрзЛржЯ ржЯрзЗржкржУржпрж╝рж╛рж░рзНржо ржорж╛ржерж╛'],
      treatment: 'Praziquantel (ржкрзНрж░рж╛ржЬрж┐ржХрзЛржпрж╝рж╛ржирзНржЯрзЗрж▓) ржлрж┐ржбрзЗ; Sanitation',
      dosage: 'ржкрзНрж░рж╛ржЬрж┐ржХрзЛржпрж╝рж╛ржирзНржЯрзЗрж▓ рззрзжтАУрзирзж mg/kg ржлрж┐ржб ├ЧрззтАУрзй ржжрж┐ржи; ржкрж╛ржЦрж┐рж░ ржкрзНрж░ржмрзЗрж╢ рж░рзЛржз; рж╕рж╛ржЗржХрзЗрж▓рзЗ рж╢рзБржХрж╛ржирзЛ'
    },
    {
      id: 'dropsy',
      name: 'Dropsy/Ascites',
      symptoms: ['ржкрзЗржЯ ржлрзЛрж▓рж╛', 'ржЧрж╣рзНржмрж░рзЗ рж╕рзНржмржЪрзНржЫ/рж╣рж▓рзБржж рждрж░рж▓'],
      treatment: 'Florfenicol (ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓), Salt Bath (рж▓ржмржг), Supportive care',
      dosage: 'ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓ рззрзжтАУрззрзл mg/kg/ржжрж┐ржи ├Чрзл; рж▓ржмржг рззтАУрзи ржХрзЗржЬрж┐/ржбрзЗрж╕рж┐ржорзЗрж▓; ржкрж╛ржирж┐ ржЙржирзНржиржпрж╝ржи; ржорж░рж┐ржмрзБржирзНржж ржХрзБрж▓'
    },
    {
      id: 'tilv',
      name: 'TiLV рж╕ржирзНржжрзЗрж╣',
      symptoms: ['рж╕ржм рж╕рж╛ржЗржЬрзЗ рж╣ржарж╛рзО ржорзГрждрзНржпрзБ', 'ржХрж╛рж▓ржЪрзЗ рждрзНржмржХ', 'ржЕрзНржпрж╛ржирж┐ржорж┐ржпрж╝рж╛'],
      treatment: 'Biosecurity (ржмрж╛ржпрж╝рзЛрж╕рж┐ржХрж┐ржЙрж░рж┐ржЯрж┐), Secondary control (рж╕рзЗржХрзЗржирзНржбрж╛рж░рж┐ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг)',
      dosage: 'ржорзБржнржорзЗржирзНржЯ ржмржирзНржз; ржЧрж┐ржпрж╝рж╛рж░ ржЬрзАржмрж╛ржгрзБржорзБржХрзНржд; ржПржпрж╝рж╛рж░рзЗрж╢ржи ржмрж╛ржбрж╝рж╛ржи; ржкрзНрж░рзЛржмрж╛ржпрж╝рзЛржЯрж┐ржХ; ржХрж░рзНрждрзГржкржХрзНрж╖ржХрзЗ ржЬрж╛ржирж╛ржирзЛ'
    },
    {
      id: 'iridovirus',
      name: 'Iridovirus-like рж╕ржирзНржжрзЗрж╣',
      symptoms: ['ржлрзБрж▓ржХрж╛ ржлрзНржпрж╛ржХрж╛рж╢рзЗ/ржирзЗржХрзНрж░рзЛрж╕рж┐рж╕', 'ржмрзНржпрж╛ржХржЯрзЗрж░рж┐ржпрж╝рж╛ ржЫрж╛ржбрж╝рж╛ ржорзГрждрзНржпрзБ'],
      treatment: 'Biosecurity (ржмрж╛ржпрж╝рзЛрж╕рж┐ржХрж┐ржЙрж░рж┐ржЯрж┐), Water Quality (ржкрж╛ржирж┐ ржорж╛ржи)',
      dosage: 'ржХрзЛржпрж╝рж╛рж░рзЗржирзНржЯрж╛ржЗржи; ржЕржмржирждрж┐ рж╣рж▓рзЗ ржЖржВрж╢рж┐ржХ рж╣рж╛рж░ржнрзЗрж╕рзНржЯ; рж╕рж╛ржЗржХрзЗрж▓ рж╢рзЗрж╖рзЗ ржбрж┐рж╕ржЗржиржлрзЗржХрж╢ржи'
    },
    {
      id: 'swim_bladder_disorder',
      name: 'Swim Bladder Disorder',
      symptoms: ['ржПржХржжрж┐ржХрзЗ ржнрж╛рж╕рзЗ', 'ржбрзБржмрзЗ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ ржирж╛'],
      treatment: 'Vitamin C (ржнрж┐ржЯрж╛ржорж┐ржи рж╕рж┐) + Vitamin E (ржнрж┐ржЯрж╛ржорж┐ржи ржЗ); Pellet check',
      dosage: 'Vit C рзлрзжрзжтАУрззрзжрзжрзж mg/kg; Vit E рззрзжрзжтАУрзирзжрзж mg/kg; рззрзитАУрзирзк ржШржирзНржЯрж╛ ржЙржкржмрж╛рж╕, ржкрж░рзЗ рж╣рж╛рж▓ржХрж╛ ржлрж┐ржб'
    },
    {
      id: 'mineral_deficiency',
      name: 'Mineral/Vit Deficiency',
      symptoms: ['ржорзЗрж░рзБржжржгрзНржб ржмрж╛ржБржХрж╛ржирзЛ', 'ржЪрзЛржпрж╝рж╛рж▓ ржмрж┐ржХрзГрждрж┐', 'ржЦрж╛рж░рж╛ржк ржЧрзНрж░рзЛрже'],
      treatment: 'Balanced Starter Feed (ржмрзНржпрж╛рж▓рж╛ржирзНрж╕ржб рж╕рзНржЯрж╛рж░рзНржЯрж╛рж░), Premix (ржкрзНрж░рж┐ржорж┐ржХрзНрж╕)',
      dosage: 'рж╕рзНржЯрж╛рж░рзНржЯрж╛рж░ рзйрзотАУрзкрзи% ржкрзНрж░рзЛржЯрж┐ржи; ржнрж┐ржЯ-ржорж┐ржи ржкрзНрж░рж┐ржорж┐ржХрзНрж╕ рж▓рзЗржмрзЗрж▓ржорждрзЛ; рждрж╛ржкржорж╛рждрзНрж░рж╛ ржарж┐ржХ рж░рж╛ржЦрж╛'
    },
    {
      id: 'reproductive_inflammation',
      name: 'Reproductive Tract Inflammation/Parasitism',
      symptoms: ['ржбрж┐ржорзНржмрж╛рж╢ржпрж╝/ржЯрзЗрж╕рзНржЯрж┐рж╕рзЗ ржкрзНрж░ржжрж╛рж╣/рж╕рж┐рж╕рзНржЯ'],
      treatment: 'Water exchange (ржкрж╛ржирж┐ ржмржжрж▓), Probiotics (ржкрзНрж░рзЛржмрж╛ржпрж╝рзЛржЯрж┐ржХ), Vet consult',
      dosage: 'ржкрж╛ржирж┐ рзирзжтАУрзйрзж% ржмржжрж▓; ржкрзНрж░рзЛржмрж╛ржпрж╝рзЛржЯрж┐ржХ рж▓рзЗржмрзЗрж▓ржорждрзЛ'
    },
    {
      id: 'gas_bubble_disease',
      name: 'Gas Bubble Disease',
      symptoms: ['ржкрж╛ржЦржирж╛/ржЪрзЛржЦрзЗ ржЧрзНржпрж╛рж╕ ржмрж╛ржмрж▓', 'ржирждрзБржи ржкрж╛ржорзНржкрзЗрж░ ржкрж░'],
      treatment: 'Vent lines (ржнрзЗржирзНржЯрж┐ржВ), Pressure тЖУ, Aeration Cascade',
      dosage: 'ржкрзНрж▓рж╛ржорзНржмрж┐ржВ ржарж┐ржХ; рж╕рзНржкрзНрж▓рзНржпрж╛рж╢/ржХрзНржпрж╛рж╕ржХрзЗржб ржПржпрж╝рж╛рж░рзЗрж╢ржи; рзирзк ржШржирзНржЯрж╛ ржлрж┐ржб ржмржирзНржз'
    },
    {
      id: 'ph_stress',
      name: 'pH Stress',
      symptoms: ['ржмрзГрж╖рзНржЯрж┐рж░ ржкрж░ ржЧржгржнрзЗрж╕рзЗ ржУржарж╛', 'pH ржУржарж╛ржирж╛ржорж╛'],
      treatment: 'Agricultural Lime (ржХрзГрж╖рж┐ ржЪрзБржи), Controlled Exchange',
      dosage: 'pH<7 рж╣рж▓рзЗ ржЪрзБржи рззтАУрзи ржХрзЗржЬрж┐/ржбрзЗрж╕рж┐ржорзЗрж▓; ржжрзБржкрзБрж░рзЗ ржЪрзБржи ржиржпрж╝; ржкрж╛ржирж┐ рзирзжтАУрзйрзж% ржмржжрж▓'
    },
    {
      id: 'columnaris',
      name: 'Columnaris',
      symptoms: ['ржлрзБрж▓ржХрж╛ ржмрж╛ржжрж╛ржорзА ржирзЗржХрзНрж░рзЛрж╕рж┐рж╕', 'рж╕рзНржпрж╛ржбрж▓ржмрзНржпрж╛ржХ ржХрзНрж╖ржд'],
      treatment: 'KMnOтВД (ржкржЯрж╛рж╢), OxytetracyclineтАФOTC (ржЕржХрзНрж╕рж┐ржЯрзЗржЯрзНрж░рж╛рж╕рж╛ржЗржХрзНрж▓рж┐ржи), Organic load тЖУ',
      dosage: 'KMnOтВД рзи ржЧрзНрж░рж╛/ржбрзЗрж╕рж┐ржорзЗрж▓; OTC рзлрзжтАУрзнрзл mg/kg/ржжрж┐ржи ├Чрзл; рж╕рж╛ржЗржлржи ржмрж░рзНржЬрзНржп'
    },
    {
      id: 'nutritional_deficit',
      name: 'Nutritional Deficit/Bacterial Keratitis',
      symptoms: ['ржЪрзЛржЦ ржШрзЛрж▓рж╛', 'ржХрж░рзНржирж┐ржпрж╝рж╛ ржЕрж╕рзНржмржЪрзНржЫ', 'ржЕрж▓рж╕'],
      treatment: 'Vitamin A/E/C Premix (ржнрж┐ржЯ A/E/C), Florfenicol (рж╕ржВржХрзНрж░ржоржгрзЗ)',
      dosage: 'Vit ржкрзНрж░рж┐ржорж┐ржХрзНрж╕ рж▓рзЗржмрзЗрж▓ржорждрзЛ; ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓ рззрзжтАУрззрзл mg/kg/ржжрж┐ржи ├Чрзл'
    },
    {
      id: 'systemic_infection',
      name: 'Systemic Infection/Septicemia',
      symptoms: ['ржкрзНрж▓рзАрж╣рж╛ ржЦрзБржм ржмржбрж╝', 'ржХрж┐ржбржирж┐рждрзЗ ржкрж┐ржЯрзЗржХрж┐ржпрж╝рж╛рж▓'],
      treatment: 'Florfenicol (ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓), KMnOтВД (ржкржЯрж╛рж╢), Water Improve',
      dosage: 'ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓ рззрзжтАУрззрзл mg/kg/ржжрж┐ржи ├Чрзл; KMnOтВД рзи ржЧрзНрж░рж╛/ржбрзЗрж╕рж┐ржорзЗрж▓'
    },
    {
      id: 'bacterial_gill_disease',
      name: 'Bacterial Gill Disease/Flexibacter-like',
      symptoms: ['ржорзБржЦрзЗрж░ ржЪрж╛рж░ржкрж╛рж╢рзЗ рж╕рж╛ржжрж╛ ржкрзНрж▓рж╛ржХ', 'ржнрж┐ржбрж╝ ржЯрзНржпрж╛ржЩрзНржХрзЗ ржорзГрждрзНржпрзБ'],
      treatment: 'Reduce Biomass (ржмрж╛ржпрж╝рзЛржорж╛рж╕ ржХржорж╛ржирзЛ), KMnOтВД (ржкржЯрж╛рж╢), OTC',
      dosage: 'рж╕рзНржЯржХ ржкрж╛рждрж▓рж╛; KMnOтВД рзи ржЧрзНрж░рж╛/ржбрзЗрж╕рж┐ржорзЗрж▓; OTC рзлрзжтАУрзнрзл mg/kg/ржжрж┐ржи ├Чрзл'
    },
    {
      id: 'internal_protozoa',
      name: 'Internal Protozoa (Hexamita/Spironucleus)',
      symptoms: ['ржЦрж╛ржУржпрж╝рж╛ ржЪрж▓рж▓рзЗржУ рж╢рзБржХрж┐ржпрж╝рзЗ ржпрж╛ржУржпрж╝рж╛', 'ржЕржирзНрждрзНрж░ ржлрзНржпрж╛ржХрж╛рж╢рзЗ'],
      treatment: 'Metronidazole (ржорзЗржЯрзНрж░рзЛржирж┐ржбрж╛ржЬрж▓; ржЖржЗржирж╕рж┐ржжрзНржз рж╣рж▓рзЗ), Probiotics',
      dosage: 'ржорзЗржЯрзНрж░рзЛржирж┐ржбрж╛ржЬрж▓ рзирзл mg/kg ржжрж┐ржирзЗ рзи ржмрж╛рж░ ├ЧрзйтАУрзл; ржкрзНрж░рзЛржмрж╛ржпрж╝рзЛржЯрж┐ржХ рж▓рзЗржмрзЗрж▓ржорждрзЛ'
    },
    {
      id: 'cold_stress',
      name: 'Cold Stress',
      symptoms: ['рж╢рзАрждрзЗ ржЕрж▓рж╕', 'рждрж▓рж╛ржпрж╝ ржЬржЯ', 'ржХрзНрж╖рзБржзрж╛ ржХржо'],
      treatment: 'Reduce Feeding (ржЦрж╛ржмрж╛рж░ ржХржо), Midday Feeding (ржжрзБржкрзБрж░рзЗ), Aeration/Depth тЖС',
      dosage: 'рззрзитАУрзи ржЯрж╛ржпрж╝ ржПржХржмрж╛рж░; рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ ржПржбрж╝рж╛ржи; ржЧржнрзАрж░ ржЕржВрж╢ рж░рж╛ржЦрзБржи'
    },
    {
      id: 'heat_stress',
      name: 'Heat Stress/Sunburn',
      symptoms: ['ржжрзБржкрзБрж░рзЗ ржЙржкрж░рзЗ', 'ржлрзНржпрж╛ржХрж╛рж╢рзЗ ржкрзНржпрж╛ржЪ', '>32тАУ34┬░C'],
      treatment: 'Shade (ржЫрж╛ржпрж╝рж╛), Aeration (ржПржпрж╝рж╛рж░рзЗрж╢ржи), Ration тЖУ',
      dosage: 'ржЦрж╛ржмрж╛рж░ рзирзжтАУрзйрзж% ржХржо; рж╕рзНржкрзНрж▓рзНржпрж╛рж╢ ржПржпрж╝рж╛рж░рзЗрж╢ржи; рж╢рзЗржб/ржкржирзНржб ржбрж╛ржЗ рж▓рзЗржмрзЗрж▓ржорждрзЛ'
    },
    {
      id: 'handling_stress',
      name: 'Handling Stress/Injury',
      symptoms: ['ржЖржБрж╢ ржХрзНрж╖рждрж┐', 'ржЖржШрж╛ржд', 'ржЬрж╛рж▓рзЗрж░ ржкрж░ ржжрзЗрж░рж┐рждрзЗ ржорзГрждрзНржпрзБ'],
      treatment: 'Salt in Transport Water (ржмрж╣ржи ржЬрж▓рзЗ рж▓ржмржг), Minimize Air Exposure',
      dosage: 'рж▓ржмржг рзитАУрзй ржЧрзНрж░рж╛/рж▓рж┐ржЯрж╛рж░; ржЕржХрзНрж╕рж┐ржЬрзЗржирзЗрж╢ржи; ржирж░ржо рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ'
    },
    {
      id: 'h2s_poisoning',
      name: 'HтВВS Poisoning (рж╕рзНрж▓рж╛ржЬ)',
      symptoms: ['рждрж▓рж╛ржпрж╝ ржЧржгржорзГрждрзНржпрзБ', 'ржлрзБрж▓ржХрж╛ ржХрж╛рж▓рзЛ', 'ржкржЪрж╛ ржбрж┐ржорзЗрж░ ржЧржирзНржз'],
      treatment: 'Don\'t Stir Sludge (рж╕рзНрж▓рж╛ржЬ ржирж╛ржбрж╝рж╛ржмрзЗржи ржирж╛), Aerate, Lime, Exchange',
      dosage: 'рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржПржпрж╝рж╛рж░рзЗрж╢ржи; ржЪрзБржи рззтАУрзи ржХрзЗржЬрж┐/ржбрзЗрж╕рж┐ржорзЗрж▓ (рждрзАрж░ ржШрзЗржБрж╖рзЗ); рзйрзжтАУрзлрзж% ржкрж╛ржирж┐ ржмржжрж▓'
    },
    {
      id: 'cyanobacteria_toxins',
      name: 'Cyanobacteria Toxins',
      symptoms: ['рж╕ржмрзБржЬ ржкрзЗржЗржирзНржЯ-рж╕ржжрзГрж╢ рж╕рзНржХрж╛ржо', 'ржмрзНрж▓рзБржо ржХрзНрж░рж╛рж╢рзЗрж░ ржкрж░ ржорзГрждрзНржпрзБ'],
      treatment: 'Exchange (ржмржжрж▓), Shading (рж╢рзЗржбрж┐ржВ), Probiotics; Fry ржерж╛ржХрж▓рзЗ Copper Avoid',
      dosage: 'рзйрзжтАУрзлрзж% ржмржжрж▓; ржбрж╛ржЗ/рж╢рзЗржб рж▓рзЗржмрзЗрж▓ржорждрзЛ; ржкрзНрж░рзЛржмрж╛ржпрж╝рзЛржЯрж┐ржХ; ржоржирж┐ржЯрж░'
    },
    {
      id: 'mixed_infection',
      name: 'Mixed Infection',
      symptoms: ['ржЖрж▓рж╕рж╛рж░ + ржкрзНрж▓рзАрж╣рж╛ ржмржбрж╝ + ржлрзБрж▓ржХрж╛ ржлрзНржпрж╛ржХрж╛рж╢рзЗ'],
      treatment: 'Parasite First тЖТ Bacteria Then; Water Improve',
      dosage: 'рж▓ржмржг ржбрж┐ржк/KMnOтВД; ржкрж░рзЗ ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓ рззрзжтАУрззрзл mg/kg/ржжрж┐ржи ├Чрзл; ржкрзНрж░рзЛржмрж╛ржпрж╝рзЛржЯрж┐ржХ'
    },
    {
      id: 'iron_precipitation',
      name: 'Iron Precipitation Irritation',
      symptoms: ['ржЯрж┐ржЙржмржУржпрж╝рзЗрж▓ ржЗржиржлрзНрж▓рзЛрждрзЗ ржлрзБрж▓ржХрж╛ржпрж╝ рж▓рж╛рж▓ржЪрзЗ-ржмрж╛ржжрж╛ржорзА рж╕рзНрждрж░'],
      treatment: 'Aerate Inflow (ржЗржиржлрзНрж▓рзЛ ржПржпрж╝рж╛рж░рзЗрж╢ржи), Settling Tank (рж╕рзЗржЯрж▓рж┐ржВ)',
      dosage: 'ржХрзНржпрж╛рж╕ржХрзЗржб ржПржпрж╝рж╛рж░рзЗрж╢ржи; ржкрзНрж░рж┐-рж╕рзЗржЯрж▓ ржХрж░рзЗ ржкрзБржХрзБрж░рзЗ ржжрж┐ржи'
    },
    {
      id: 'overfeeding',
      name: 'Overfeeding/Temporary Buoyancy',
      symptoms: ['ржЕрждрж┐ржнрзЛржЬржирзЗрж░ ржкрж░ ржкрзЗржЯ-ржЙржкрж░рзЗ ржнрж╛рж╕рж╛', 'ржЕржирзНрждрзНрж░ ржнрж░рж╛'],
      treatment: 'Fasting (ржЙржкржмрж╛рж╕), Small Frequent Feeds',
      dosage: 'рззрзитАУрзирзк ржШржирзНржЯрж╛ ржлрж┐ржб ржмржирзНржз; ржкрж░рзЗ рзнрзжтАУрзорзж% рж░рзЗрж╢ржи, ржжрж┐ржирзЗ рзитАУрзй ржмрж╛рж░'
    },
    {
      id: 'vitamin_c_deficiency',
      name: 'Vitamin C Deficiency',
      symptoms: ['ржкрж╛ржЦржирж╛ ржнржЩрзНржЧрзБрж░', 'ржХрзНрж╖ржд рж╕рж╛рж░рждрзЗ ржжрзЗрж░рж┐'],
      treatment: 'Vitamin C Premix (ржнрж┐ржЯрж╛ржорж┐ржи рж╕рж┐ ржкрзНрж░рж┐ржорж┐ржХрзНрж╕)',
      dosage: 'рзлрзжрзжтАУрззрзжрзжрзж mg Vit C/ржХрзЗржЬрж┐ ржлрж┐ржб ├ЧрзитАУрзк рж╕ржкрзНрждрж╛рж╣'
    },
    {
      id: 'black_spot_disease',
      name: 'Black Spot Disease (Metacercaria)',
      symptoms: ['рждрзНржмржХрзЗрж░ ржирж┐ржЪрзЗ ржЧрзЛрж▓ржорж░рж┐ржЪ ржжрж╛ржЧ'],
      treatment: 'Break Bird/Snail Cycle (ржкрж╛ржЦрж┐/рж╢рж╛ржорзБржХ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг), Lime, Drying',
      dosage: 'ржкрзБржХрзБрж░ рж╢рзБржХрж╛ржирзЛ; ржЪрзБржи рззтАУрзи ржХрзЗржЬрж┐/ржбрзЗрж╕рж┐ржорзЗрж▓; рж╢рж╛ржорзБржХ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг'
    },
    {
      id: 'chronic_anemia',
      name: 'Chronic Anemia',
      symptoms: ['ржлрзБрж▓ржХрж╛ ржлрзНржпрж╛ржХрж╛рж╢рзЗ', 'рж░ржХрзНржд ржкрж╛рждрж▓рж╛', 'ржЧрзНрж░рзЛрже рж╕рзНрж▓рзЛ'],
      treatment: 'Check Feed, Deworm (ржХрзГржорж┐ржирж╛рж╢ржХ), Vit-Min',
      dosage: 'Fenbendazole (ржлрзЗржиржмрзЗржиржбрж╛ржЬрж▓) рззрзж mg/kg ржлрж┐ржб ├Чрзй; ржнрж┐ржЯ-ржорж┐ржи ржкрзНрж░рж┐ржорж┐ржХрзНрж╕'
    },
    {
      id: 'mouth_rot',
      name: 'Mouth Rot (ржмрзНржпрж╛ржХржЯрзЗрж░рж┐ржпрж╝рж╛рж▓)',
      symptoms: ['ржорзБржЦрзЗрж░ ржХрж┐ржирж╛рж░рж╛ ржХрзНрж╖ржпрж╝', 'ржЦрзЗрждрзЗ ржХрж╖рзНржЯ'],
      treatment: 'Medicated Feed (ржЕрзНржпрж╛ржирзНржЯрж┐ржмрж╛ржпрж╝рзЛржЯрж┐ржХ ржлрж┐ржб), Povidone-Iodine (ржЖржЗржбрж┐ржи)',
      dosage: 'Florfenicol (ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓) рззрзжтАУрззрзл mg/kg/ржжрж┐ржи ├Чрзл; ржХрзНрж╖рждрзЗ рззтАУрзи% ржЖржпрж╝рзЛржбрж┐ржи (ржкрзБржХрзБрж░рзЗ ржиржпрж╝)'
    },
    {
      id: 'gill_hyperplasia',
      name: 'Gill Hyperplasia (ржЗрж░рж┐ржЯрзНржпрж╛ржирзНржЯ)',
      symptoms: ['ржлрзБрж▓ржХрж╛ ржкрзБрж░рзБ', 'ржЧрзНржпрж╛рж╕ ржПржХрзНрж╕ржЪрзЗржЮрзНржЬ ржХржо', 'ржкрж░ржЬрзАржмрзА ржирзЗржЗ'],
      treatment: 'Water Improve, Reduce Organics, Mild KMnOтВД',
      dosage: 'рж╕рзНрж▓рж╛ржЬ рж╕рж╛ржЗржлржи; KMnOтВД рзи ржЧрзНрж░рж╛/ржбрзЗрж╕рж┐ржорзЗрж▓; ржЯрж╛рж░рзНржиржУржнрж╛рж░ ржмрж╛ржбрж╝рж╛ржи'
    },
    {
      id: 'streptococcus',
      name: 'Streptococcus agalactiae/iniae',
      symptoms: ['ржЧрж░ржорзЗ ржЕрж▓рж╕', 'ржШрзВрж░рзНржгрж┐', 'ржкржк-ржЖржЗ', 'рж░ржХрзНрждржХрзНрж╖рж░ржг', 'рж╕рзНржирж╛ржпрж╝ржмрж┐ржХ рж╕рж╛ржЗржи'],
      treatment: 'Florfenicol (ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓) / Oxytetracycline (ржЕржХрзНрж╕рж┐ржЯрзЗржЯрзНрж░рж╛рж╕рж╛ржЗржХрзНрж▓рж┐ржи), Vaccination (ржнрзНржпрж╛ржХрж╕рж┐ржитАФржкрзНрж░рж┐ржнрзЗржирж╢ржи)',
      dosage: 'ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓ рззрзжтАУрззрзл mg/kg/ржжрж┐ржи ├ЧрзлтАУрзн; ржнржмрж┐рж╖рзНржпрждрзЗ ржнрзНржпрж╛ржХрж╕рж┐ржи ржкрзНрж░рзЛржЧрзНрж░рж╛ржо ржмрж┐ржмрзЗржЪржирж╛'
    },
    {
      id: 'edwardsiella',
      name: 'Edwardsiella tarda/ictaluri',
      symptoms: ['ржЖрж▓рж╕рж╛рж░ + рж▓рж┐ржнрж╛рж░/ржХрж┐ржбржирж┐рждрзЗ ржЕрзНржпрж╛ржмрж╕рзЗрж╕', 'ржЙржЪрзНржЪ ржорзГрждрзНржпрзБ'],
      treatment: 'Medicated feed per antibiogram (рж▓рзНржпрж╛ржм-рж╕ржВржмрзЗржжржирж╢рзАрж▓рждрж╛ ржЕржирзБржпрж╛ржпрж╝рзА)',
      dosage: 'ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓ рззрзжтАУрззрзл mg/kg/ржжрж┐ржи ├ЧрзлтАУрзн; рж▓рзНржпрж╛ржм рж╕рзЗржирж╕рж┐ржЯрж┐ржнрж┐ржЯрж┐ рж╕рзБржкрж╛рж░рж┐рж╢'
    },
    {
      id: 'columnaris_2',
      name: 'Columnaris',
      symptoms: ['ржкрж╛ржЦржирж╛рж░ ржХрж┐ржирж╛рж░рж╛ рж╕рж╛ржжрж╛/ржХрзНрж╖ржпрж╝', 'рж╕рзНржпрж╛ржбрж▓ржмрзНржпрж╛ржХ', 'ржЙрж╖рзНржг ржЬрж▓рзЗ ржмрзЗрж╢рж┐'],
      treatment: 'KMnOтВД (ржкржЯрж╛рж╢), OTC (ржЕржХрзНрж╕рж┐ржЯрзЗржЯрзНрж░рж╛рж╕рж╛ржЗржХрзНрж▓рж┐ржи)',
      dosage: 'KMnOтВД рзи ржЧрзНрж░рж╛/ржбрзЗрж╕рж┐ржорзЗрж▓; OTC рзлрзжтАУрзнрзл mg/kg/ржжрж┐ржи ├Чрзл'
    },
    {
      id: 'saprolegnia_eggs',
      name: 'Saprolegnia on Eggs',
      symptoms: ['рж╣рзНржпрж╛ржЪрж╛рж░рж┐ ржЯрзНрж░рзЗрждрзЗ ржбрж┐ржорзЗ рждрзБрж▓рж╛рж░ ржорждрзЛ ржмрзГржжрзНржзрж┐'],
      treatment: 'Hydrogen PeroxideтАФHтВВOтВВ (рж╣рж╛ржЗржбрзНрж░рзЛржЬрзЗржи ржкрж╛рж░ржЕржХрзНрж╕рж╛ржЗржб), Acriflavine (ржЕрзНржпрж╛ржХрзНрж░рж┐ржлрзНрж▓рж╛ржнрж┐ржи)',
      dosage: 'HтВВOтВВ рзлрзжрзжтАУрззрзжрзжрзж ppm рж╕рзНржмрж▓рзНржк рж╕ржоржпрж╝; SOP ржорзЗржирзЗ ржЪрж▓рзБржи'
    },
    {
      id: 'argulus_bacteria',
      name: 'Argulus + Secondary Bacteria',
      symptoms: ['ржПржХржЗ ржжрзЗрж╣рзЗ ржмрж╣рзБ ржЙржХрзБржи + ржЖрж▓рж╕рж╛рж░'],
      treatment: 'First Trichlorfon (ржЯрзНрж░рж╛ржЗржХрзНрж▓рзЛрж░ржлржи), Then Antibiotic Feed (ржЕрзНржпрж╛ржирзНржЯрж┐ржмрж╛ржпрж╝рзЛржЯрж┐ржХ ржлрж┐ржб)',
      dosage: 'ржЯрзНрж░рж╛ржЗржХрзНрж▓рзЛрж░ржлржи рзж.рзирзлтАУрзж.рзл mg/L; ржПрж░ржкрж░ ржлрзНрж▓рж░ржлрзЗржирж┐ржХрж▓ рззрзжтАУрззрзл mg/kg/ржжрж┐ржи ├Чрзл'
    },
    {
      id: 'osmotic_shock',
      name: 'Osmotic/pH Shock',
      symptoms: ['ржнрж╛рж░рж┐ ржмрзГрж╖рзНржЯрж┐/ржЯржк-ржЖржкрзЗрж░ ржкрж░ ржЧрж╛ ржШрж╖рж╛', 'ржорж┐ржЙржХрж╛рж╕', 'ржорзГрждрзНржпрзБ'],
      treatment: 'Salt (рж▓ржмржг), Agricultural Lime (ржЪрзБржи), Gradual Exchange (ржзрзАрж░рзЗ ржмржжрж▓)',
      dosage: 'рж▓ржмржг рззтАУрзи ржХрзЗржЬрж┐/ржбрзЗрж╕рж┐ржорзЗрж▓; ржЪрзБржи рззтАУрзи ржХрзЗржЬрж┐/ржбрзЗрж╕рж┐ржорзЗрж▓; рж╣ржарж╛рзО ржЗржиржлрзНрж▓рзЛ ржПржбрж╝рж╛ржи'
    },
    {
      id: 'organophosphate_poisoning',
      name: 'Organophosphate/Pyrethroid Poisoning',
      symptoms: ['ржХрзГрж╖рж┐ рж░рж╛ржи-ржЕржлрзЗрж░ ржкрж░ ржЧржгржорзГрждрзНржпрзБ', 'ржЦрж┐ржБржЪрзБржирж┐'],
      treatment: 'Stop Inflow (ржЗржиржлрзНрж▓рзЛ ржмржирзНржз), Exchange (ржкрж╛ржирж┐ ржмржжрж▓), Activated Carbon Screen (ржЕрзНржпрж╛ржХрзНржЯрж┐ржнрзЗржЯрзЗржб ржХрж╛рж░рзНржмржи)',
      dosage: 'рзлрзжтАУрзорзж% ржкрж╛ржирж┐ ржмржжрж▓; ржЗржирж▓рзЗржЯрзЗ ржХрж╛рж░рзНржмржи рззрзжтАУрзирзж ржЧрзНрж░рж╛/ржорж┐┬│; ржкрзНрж░рждрж┐ржмрзЗрж╢рзАржХрзЗ рж╕рждрж░рзНржХ ржХрж░рзБржи'
    },
    {
      id: 'healthy',
      name: 'рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ ржЕржмрж╕рзНржерж╛',
      symptoms: [],
      treatment: 'ржХрзЛржирзЛ ржЪрж┐ржХрж┐рзОрж╕рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи ржирзЗржЗ',
      dosage: 'ржнрж╛рж▓рзЛ ржЦрж╛ржмрж╛рж░ ржПржмржВ ржкрж░рж┐ржЪрж░рзНржпрж╛ ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржи'
    }
  ]
};

interface SelectedOrgan {
  id: string;
  name: string;
  conditions: string[];
}

interface Diagnosis {
  disease: string;
  confidence: number;
  treatment: string;
  dosage: string;
}

export default function MedicalDiagnosticPage() {
  const [selectedPond, setSelectedPond] = useState<Pond | null>(null);
  const [selectedOrgans, setSelectedOrgans] = useState<SelectedOrgan[]>([]);
  const [diagnosis, setDiagnosis] = useState<Diagnosis | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editableDiagnosis, setEditableDiagnosis] = useState<Diagnosis | null>(null);
  const [isSaving, setIsSaving] = useState(false);
  const [savedDiagnostic, setSavedDiagnostic] = useState<MedicalDiagnostic | null>(null);
  const [savedDiagnostics, setSavedDiagnostics] = useState<MedicalDiagnostic[]>([]);

  // Fetch real ponds data from API
  const { data: pondsData, isLoading: pondsLoading } = usePonds();
  const ponds = extractApiData<Pond>(pondsData);

  // Fetch saved diagnostics on component mount
  useEffect(() => {
    fetchSavedDiagnostics();
  }, []);

  const handleOrganSelect = (organId: string) => {
    const organ = medicalData.organs.find(o => o.id === organId);
    if (!organ) return;

    const existingOrgan = selectedOrgans.find(o => o.id === organId);
    if (existingOrgan) {
      setSelectedOrgans(selectedOrgans.filter(o => o.id !== organId));
    } else {
      setSelectedOrgans([...selectedOrgans, { id: organId, name: organ.name, conditions: [] }]);
    }
  };

  const handleConditionSelect = (organId: string, condition: string) => {
    setSelectedOrgans(prev => prev.map(organ => {
      if (organ.id === organId) {
        const hasCondition = organ.conditions.includes(condition);
        return {
          ...organ,
          conditions: hasCondition 
            ? organ.conditions.filter(c => c !== condition)
            : [...organ.conditions, condition]
        };
      }
      return organ;
    }));
  };

  const analyzeSymptoms = () => {
    setIsAnalyzing(true);
    
    // Simulate analysis delay
    setTimeout(() => {
      const allConditions = selectedOrgans.flatMap(organ => organ.conditions);
      
      if (allConditions.length === 0) {
        setDiagnosis({
          disease: 'ржХрзЛржирзЛ рж▓ржХрзНрж╖ржг ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рж╛ рж╣ржпрж╝ржирж┐',
          confidence: 0,
          treatment: 'ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж▓ржХрзНрж╖ржг ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
          dosage: ''
        });
        setIsAnalyzing(false);
        return;
      }

      // Check for healthy conditions only
      const healthyConditions = selectedOrgans.every(organ => 
        organ.conditions.every(condition => 
          medicalData.conditions[organ.id as keyof typeof medicalData.conditions]?.healthy.includes(condition)
        )
      );

      if (healthyConditions) {
        setDiagnosis({
          disease: 'рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ ржЕржмрж╕рзНржерж╛',
          confidence: 95,
          treatment: 'ржХрзЛржирзЛ ржЪрж┐ржХрж┐рзОрж╕рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи ржирзЗржЗред ржнрж╛рж▓рзЛ ржЦрж╛ржмрж╛рж░ ржПржмржВ ржкрж░рж┐ржЪрж░рзНржпрж╛ ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржиред',
          dosage: 'ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржкрж░рж┐ржмрж░рзНрждржи ржПржмржВ ржорж╛ржирж╕ржорзНржкржирзНржи ржЦрж╛ржмрж╛рж░ ржжрж┐ржиред'
        });
        setIsAnalyzing(false);
        return;
      }

      // Enhanced matching algorithm that properly handles multiple organs
      const diseaseMatches = medicalData.diseases
        .filter(disease => disease.id !== 'healthy')
        .map(disease => {
          let score = 0;
          let exactMatches = 0;
          let partialMatches = 0;
          let organMatches = 0;
          const symptomMatches = [];
          
          // Check each selected organ's conditions against disease symptoms
          for (const organ of selectedOrgans) {
            let organHasMatch = false;
            const organSymptomMatches = [];
            
            for (const condition of organ.conditions) {
              // Check for exact symptom matches
              const exactMatch = disease.symptoms.some(symptom => 
                condition.toLowerCase() === symptom.toLowerCase()
              );
              
              if (exactMatch) {
                exactMatches++;
                score += 20; // Higher score for exact matches
                organHasMatch = true;
                organSymptomMatches.push({ condition, match: 'exact' });
              } else {
                // Check for partial matches with better keyword matching
                const partialMatch = disease.symptoms.some(symptom => {
                  const conditionLower = condition.toLowerCase();
                  const symptomLower = symptom.toLowerCase();
                  
                  // Direct substring match
                  if (conditionLower.includes(symptomLower) || symptomLower.includes(conditionLower)) {
                    return true;
                  }
                  
                  // Keyword matching
                  const conditionWords = conditionLower.split(/[\s,;]+/).filter(w => w.length > 2);
                  const symptomWords = symptomLower.split(/[\s,;]+/).filter(w => w.length > 2);
                  
                  const hasKeywordMatch = conditionWords.some(cw => 
                    symptomWords.some(sw => 
                      cw.includes(sw) || sw.includes(cw) ||
                      // Common Bengali medical terms
                      (cw === 'ржлрзБрж▓ржХрж╛' && sw === 'gill') ||
                      (cw === 'ржЪрзЛржЦ' && sw === 'eye') ||
                      (cw === 'рждрзНржмржХ' && sw === 'skin') ||
                      (cw === 'ржпржХрзГржд' && sw === 'liver') ||
                      (cw === 'ржЕржирзНрждрзНрж░' && sw === 'intestine') ||
                      (cw === 'ржкрзНрж▓рзАрж╣рж╛' && sw === 'spleen') ||
                      (cw === 'ржХрж┐ржбржирж┐' && sw === 'kidney') ||
                      (cw === 'ржорж╕рзНрждрж┐рж╖рзНржХ' && sw === 'brain') ||
                      (cw === 'ржорж╛ржВрж╕ржкрзЗрж╢рж┐' && sw === 'muscle')
                    )
                  );
                  
                  return hasKeywordMatch;
                });
                
                if (partialMatch) {
                  partialMatches++;
                  score += 10; // Good score for partial matches
                  organHasMatch = true;
                  organSymptomMatches.push({ condition, match: 'partial' });
                }
              }
            }
            
            if (organHasMatch) {
              organMatches++;
              symptomMatches.push({
                organ: organ.name,
                matches: organSymptomMatches
              });
            }
          }
          
          // Calculate confidence based on matches and organ involvement
          const totalSymptoms = disease.symptoms.length;
          const totalConditions = allConditions.length;
          
          // More sophisticated confidence calculation
          let confidence = 0;
          if (exactMatches > 0) {
            confidence += (exactMatches / totalConditions) * 60; // Exact matches are very important
          }
          if (partialMatches > 0) {
            confidence += (partialMatches / totalConditions) * 30; // Partial matches are good
          }
          
          // Organ involvement bonus
          if (organMatches > 1) {
            confidence += Math.min(20, (organMatches - 1) * 10); // Bonus for multi-organ involvement
          }
          
          // Penalty for diseases with very few symptoms if many conditions selected
          if (totalSymptoms < 3 && totalConditions > 5) {
            confidence = Math.max(0, confidence - 15);
          }
          
          // Bonus for diseases that typically affect multiple organs
          const multiOrganDiseases = ['bacterial_septicemia', 'systemic_infection', 'mixed_infection', 'tilv', 'iridovirus', 'streptococcus', 'edwardsiella'];
          if (multiOrganDiseases.includes(disease.id) && organMatches > 1) {
            confidence += 15;
          }
          
          // Ensure confidence is between 0 and 95
          confidence = Math.min(95, Math.max(0, Math.round(confidence)));
          
          return {
            disease,
            score,
            confidence,
            exactMatches,
            partialMatches,
            organMatches,
            symptomMatches
          };
        })
        .filter(match => match.confidence > 0)
        .sort((a, b) => {
          // Primary sort by confidence, secondary by exact matches, tertiary by organ matches
          if (b.confidence !== a.confidence) {
            return b.confidence - a.confidence;
          }
          if (b.exactMatches !== a.exactMatches) {
            return b.exactMatches - a.exactMatches;
          }
          if (b.organMatches !== a.organMatches) {
            return b.organMatches - a.organMatches;
          }
          return b.score - a.score;
        });

      if (diseaseMatches.length === 0) {
        setDiagnosis({
          disease: 'ржЕржЬрж╛ржирж╛ рж░рзЛржЧ/ржЕржмрж╕рзНржерж╛',
          confidence: 0,
          treatment: 'ржПржХржЬржи ржкрж╢рзБржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржиред рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржЖрж░ржУ ржмрж┐рж╢ржжржнрж╛ржмрзЗ ржкрж░рзНржпржмрзЗржХрзНрж╖ржг ржХрж░рзБржиред',
          dosage: 'ржкрж╛ржирж┐ ржорж╛ржи ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи ржПржмржВ ржорж╛ржЫрзЗрж░ ржЖржЪрж░ржг ржоржирж┐ржЯрж░ ржХрж░рзБржиред'
        });
        setIsAnalyzing(false);
        return;
      }

      const bestMatch = diseaseMatches[0];
      
      // If confidence is very low, suggest multiple possibilities
      if (bestMatch.confidence < 30 && diseaseMatches.length > 1) {
        const topMatches = diseaseMatches.slice(0, 3);
        const diseaseNames = topMatches.map(m => m.disease.name).join(', ');
        
        setDiagnosis({
          disease: `рж╕ржорзНржнрж╛ржмрзНржп рж░рзЛржЧ: ${diseaseNames}`,
          confidence: bestMatch.confidence,
          treatment: `ржкрзНрж░рж╛ржержорж┐ржХ ржЪрж┐ржХрж┐рзОрж╕рж╛: ${bestMatch.disease.treatment}`,
          dosage: `ржбрзЛржЬ: ${bestMatch.disease.dosage}ред ржЕржирзНржпрж╛ржирзНржп рж╕ржорзНржнрж╛ржмржирж╛: ${topMatches.slice(1).map(m => m.disease.name).join(', ')}`
        });
      } else {
        // Add organ involvement info for better diagnosis
        const organInfo = selectedOrgans.length > 1 ? 
          ` (${selectedOrgans.length}ржЯрж┐ ржЕржЩрзНржЧрзЗ рж▓ржХрзНрж╖ржг: ${selectedOrgans.map(o => o.name).join(', ')})` : '';
        
        // Add symptom matching info for debugging
        const symptomInfo = bestMatch.symptomMatches && bestMatch.symptomMatches.length > 0 ? 
          `\n\nржорж┐рж▓рзЗ ржпрж╛ржУржпрж╝рж╛ рж▓ржХрзНрж╖ржг:\n${bestMatch.symptomMatches.map(organMatch => 
            `${organMatch.organ}: ${organMatch.matches.map(m => m.condition).join(', ')}`
          ).join('\n')}` : '';
        
        setDiagnosis({
          disease: bestMatch.disease.name + organInfo,
          confidence: bestMatch.confidence,
          treatment: bestMatch.disease.treatment,
          dosage: bestMatch.disease.dosage + symptomInfo
        });
      }
      
      setIsAnalyzing(false);
    }, 2000);
  };

  const resetDiagnosis = () => {
    setSelectedPond(null);
    setSelectedOrgans([]);
    setDiagnosis(null);
    setIsEditing(false);
    setEditableDiagnosis(null);
    setSavedDiagnostic(null);
  };

  const startEditing = () => {
    if (diagnosis) {
      setEditableDiagnosis({ ...diagnosis });
      setIsEditing(true);
    }
  };

  const cancelEditing = () => {
    setIsEditing(false);
    setEditableDiagnosis(null);
  };

  const updateEditableDiagnosis = (field: keyof Diagnosis, value: string | number) => {
    if (editableDiagnosis) {
      setEditableDiagnosis({
        ...editableDiagnosis,
        [field]: value
      });
    }
  };

  const saveDiagnosticToDatabase = async (diagnosisToSave?: Diagnosis) => {
    if (!selectedPond) return;

    const diagnosisData = diagnosisToSave || editableDiagnosis;
    if (!diagnosisData) return;

    setIsSaving(true);
    try {
      const diagnosticData = {
        pond: selectedPond.id,
        disease_name: diagnosisData.disease,
        confidence_percentage: diagnosisData.confidence.toString(),
        recommended_treatment: diagnosisData.treatment,
        dosage_application: diagnosisData.dosage,
        selected_organs: selectedOrgans.map(organ => ({
          id: organ.id,
          name: organ.name,
          conditions: organ.conditions
        })),
        selected_symptoms: selectedOrgans.flatMap(organ => organ.conditions),
        notes: ''
      };

      const response = await api.post('/medical-diagnostics/', diagnosticData);
      setSavedDiagnostic(response.data);
      
      if (editableDiagnosis) {
        setDiagnosis(editableDiagnosis);
        setIsEditing(false);
        setEditableDiagnosis(null);
      }
      
      // Refresh the diagnostics list
      fetchSavedDiagnostics();
    } catch (error) {
      console.error('Error saving diagnostic:', error);
      alert('ржЪрж┐ржХрж┐рзОрж╕рж╛ рж╕ржВрж░ржХрзНрж╖ржгрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред');
    } finally {
      setIsSaving(false);
    }
  };

  const fetchSavedDiagnostics = async () => {
    try {
      const response = await api.get('/medical-diagnostics/');
      setSavedDiagnostics(response.data.results || response.data);
    } catch (error) {
      console.error('Error fetching diagnostics:', error);
    }
  };

  const saveWithoutEditing = () => {
    if (diagnosis) {
      saveDiagnosticToDatabase(diagnosis);
    }
  };

  const applyTreatment = async () => {
    if (!savedDiagnostic) return;

    try {
      await api.post(`/medical-diagnostics/${savedDiagnostic.id}/apply_treatment/`);
      setSavedDiagnostic({
        ...savedDiagnostic,
        is_applied: true,
        applied_at: new Date().toISOString()
      });
      alert('ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!');
    } catch (error) {
      console.error('Error applying treatment:', error);
      alert('ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкрзНрж░ржпрж╝рзЛржЧрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред');
    }
  };

  return (
    <div className="container mx-auto p-6 max-w-6xl">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-center mb-4">
          ЁЯРЯ ржорж╛ржЫрзЗрж░ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржбрж╛ржпрж╝рж╛ржЧржирж╕рзНржЯрж┐ржХ рж╕рж╣рж╛ржпрж╝ржХ
        </h1>
        <p className="text-center text-gray-600">
          ржкрзБржХрзБрж░ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи, ржЕржЩрзНржЧ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи ржПржмржВ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рзБржи рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝рзЗрж░ ржЬржирзНржп
        </p>
        <div className="text-center mt-4">
          <Link href="/medical-diagnostics">
            <Button
              variant="outline"
              className="flex items-center gap-2 text-white"
            >
              <Brain className="h-4 w-4" />
              рж╕ржВрж░ржХрзНрж╖рж┐ржд рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝ ржжрзЗржЦрзБржи
            </Button>
          </Link>
        </div>
      </div>

      {/* Pond Selection */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <span className="text-2xl">ЁЯПЮя╕П</span>
            ржкрзБржХрзБрж░ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи
          </CardTitle>
        </CardHeader>
        <CardContent>
          {pondsLoading ? (
            <div className="flex items-center justify-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              <span className="ml-3 text-gray-600">ржкрзБржХрзБрж░рзЗрж░ рждрж╛рж▓рж┐ржХрж╛ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...</span>
            </div>
          ) : ponds.length === 0 ? (
            <div className="text-center py-8">
              <Fish className="mx-auto h-12 w-12 text-gray-400" />
              <h3 className="mt-2 text-sm font-medium text-gray-900">ржХрзЛржирзЛ ржкрзБржХрзБрж░ ржирзЗржЗ</h3>
              <p className="mt-1 text-sm text-gray-500">ржкрзНрж░ржержорзЗ ржПржХржЯрж┐ ржкрзБржХрзБрж░ рждрзИрж░рж┐ ржХрж░рзБржи</p>
            </div>
          ) : (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {ponds.map(pond => (
                  <Button
                    key={pond.id}
                    variant={selectedPond?.id === pond.id ? "default" : "outline"}
                    onClick={() => setSelectedPond(pond)}
                    className="h-auto p-4 flex flex-col items-start gap-2 text-left"
                  >
                    <div className={`font-semibold ${selectedPond?.id === pond.id ? 'text-black' : 'text-white'}`}>{pond.name}</div>
                    <div className={`text-sm opacity-90 flex items-center gap-1 ${selectedPond?.id === pond.id ? 'text-black' : 'text-white'}`}>
                      <Droplets className="h-3 w-3" />
                      ржЖржХрж╛рж░: {parseFloat(pond.area_decimal).toFixed(3)} ржбрзЗрж╕рж┐ржорзЗрж▓
                    </div>
                    <div className={`text-sm opacity-90 flex items-center gap-1 ${selectedPond?.id === pond.id ? 'text-black' : 'text-white'}`}>
                      <Activity className="h-3 w-3" />
                      ржЧржнрзАрж░рждрж╛: {parseFloat(pond.depth_ft).toFixed(1)} ржлрзБржЯ
                    </div>
                    <div className={`text-sm opacity-90 flex items-center gap-1 ${selectedPond?.id === pond.id ? 'text-black' : 'text-white'}`}>
                      <Fish className="h-3 w-3" />
                      ржЖржпрж╝рждржи: {parseFloat(pond.volume_m3).toFixed(1)} m┬│
                    </div>
                    {pond.location && (
                      <div className={`text-sm opacity-90 flex items-center gap-1 ${selectedPond?.id === pond.id ? 'text-black' : 'text-white'}`}>
                        <MapPin className="h-3 w-3" />
                        {pond.location}
                      </div>
                    )}
                    <div className={`text-xs px-2 py-1 rounded-full ${
                      pond.is_active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                    }`}>
                      {pond.is_active ? 'рж╕ржХрзНрж░рж┐ржпрж╝' : 'ржирж┐рж╖рзНржХрзНрж░рж┐ржпрж╝'}
                    </div>
                  </Button>
                ))}
              </div>
              
              {selectedPond && (
                <div className="mt-4 p-3 bg-blue-50 rounded-lg">
                  <p className="text-sm text-blue-800">
                    <strong>ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржкрзБржХрзБрж░:</strong> {selectedPond.name} ({parseFloat(selectedPond.area_decimal).toFixed(3)} ржбрзЗрж╕рж┐ржорзЗрж▓) - {selectedPond.location || 'ржЕржмрж╕рзНржерж╛ржи ржЙрж▓рзНрж▓рзЗржЦ ржирзЗржЗ'}
                  </p>
                </div>
              )}
            </>
          )}
        </CardContent>
      </Card>


      {selectedPond && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Organ Selection */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Heart className="h-5 w-5" />
                ржЕржЩрзНржЧ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 gap-3">
                {medicalData.organs.map(organ => (
                  <Button
                    key={organ.id}
                    variant={selectedOrgans.some(o => o.id === organ.id) ? "default" : "outline"}
                    onClick={() => handleOrganSelect(organ.id)}
                    className="h-auto p-4 flex flex-col items-center gap-2"
                  >
                    <span className="text-2xl">{organ.icon}</span>
                    <span className={`text-sm text-center ${selectedOrgans.some(o => o.id === organ.id) ? 'text-black' : 'text-white'}`}>{organ.name}</span>
                  </Button>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Condition Selection */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Eye className="h-5 w-5" />
                рж▓ржХрзНрж╖ржг ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {selectedOrgans.map(organ => (
                  <div key={organ.id} className="border rounded-lg p-4">
                    <h4 className="font-semibold mb-3 flex items-center gap-2">
                      {medicalData.organs.find(o => o.id === organ.id)?.icon} {organ.name}
                    </h4>
                    
                    {/* Healthy Conditions */}
                    <div className="mb-4">
                      <h5 className="text-sm font-medium text-green-700 mb-2 flex items-center gap-1">
                        <CheckCircle className="h-4 w-4" />
                        рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ рж▓ржХрзНрж╖ржг
                      </h5>
                      <div className="flex flex-wrap gap-2">
                        {medicalData.conditions[organ.id as keyof typeof medicalData.conditions]?.healthy.map(condition => (
                          <Button
                            key={condition}
                            variant={organ.conditions.includes(condition) ? "default" : "outline"}
                            size="sm"
                            onClick={() => handleConditionSelect(organ.id, condition)}
                            className={`text-xs ${organ.conditions.includes(condition) ? 'text-black' : 'text-white'}`}
                          >
                            {condition}
                          </Button>
                        ))}
                      </div>
                    </div>

                    {/* Unhealthy Conditions */}
                    <div>
                      <h5 className="text-sm font-medium text-red-700 mb-2 flex items-center gap-1">
                        <AlertTriangle className="h-4 w-4" />
                        ржЕрж╕рзБрж╕рзНрже/ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ рж▓ржХрзНрж╖ржг
                      </h5>
                      <div className="flex flex-wrap gap-2">
                        {medicalData.conditions[organ.id as keyof typeof medicalData.conditions]?.unhealthy.map(condition => (
                          <Button
                            key={condition}
                            variant={organ.conditions.includes(condition) ? "destructive" : "outline"}
                            size="sm"
                            onClick={() => handleConditionSelect(organ.id, condition)}
                            className={`text-xs ${organ.conditions.includes(condition) ? 'text-black' : 'text-white'}`}
                          >
                            {condition}
                          </Button>
                        ))}
                      </div>
                    </div>
                  </div>
                ))}
                
                {selectedOrgans.length === 0 && (
                  <p className="text-center text-gray-500 py-8">
                    ржкрзНрж░ржержорзЗ ржЕржЩрзНржЧ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи
                  </p>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Analysis Button */}
      {selectedPond && (
        <div className="mt-6 text-center">
          <Button
            onClick={analyzeSymptoms}
            disabled={selectedOrgans.length === 0 || isAnalyzing}
            size="lg"
            className="px-8"
          >
            {isAnalyzing ? (
              <>
                <Zap className="h-4 w-4 mr-2 animate-spin" />
                ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржЪрж▓ржЫрзЗ...
              </>
            ) : (
              <>
                <Brain className="h-4 w-4 mr-2" />
                рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝ ржХрж░рзБржи
              </>
            )}
          </Button>
          
          {(selectedOrgans.length > 0 || selectedPond) && (
            <Button
              variant="outline"
              onClick={resetDiagnosis}
              className="ml-4 text-white"
            >
              рж░рж┐рж╕рзЗржЯ ржХрж░рзБржи
            </Button>
          )}
        </div>
      )}

      {!selectedPond && (
        <div className="mt-6 text-center">
          <p className="text-gray-500 text-lg">
            рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрзНрж░ржержорзЗ ржПржХржЯрж┐ ржкрзБржХрзБрж░ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи
          </p>
        </div>
      )}

      {/* Diagnosis Results */}
      {diagnosis && (
        <Card className="mt-6">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center gap-2">
                <Brain className="h-5 w-5" />
                рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝рзЗрж░ ржлрж▓рж╛ржлрж▓
              </CardTitle>
              {!isEditing && !savedDiagnostic && (
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => saveWithoutEditing()}
                    disabled={isSaving}
                    className="flex items-center gap-2 text-white"
                  >
                    <Save className="h-4 w-4" />
                    {isSaving ? 'рж╕ржВрж░ржХрзНрж╖ржг рж╣ржЪрзНржЫрзЗ...' : 'рж╕ржВрж░ржХрзНрж╖ржг'}
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={startEditing}
                    className="flex items-center gap-2 text-white"
                  >
                    <Edit3 className="h-4 w-4" />
                    рж╕ржорзНржкрж╛ржжржирж╛ ржХрж░рзБржи
                  </Button>
                </div>
              )}
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            {selectedPond && (
              <div className="bg-blue-50 p-3 rounded-lg mb-4">
                <p className="text-sm text-blue-800">
                  <strong>ржкрзБржХрзБрж░:</strong> {selectedPond.name} ({parseFloat(selectedPond.area_decimal).toFixed(3)} ржбрзЗрж╕рж┐ржорзЗрж▓) - {selectedPond.location || 'ржЕржмрж╕рзНржерж╛ржи ржЙрж▓рзНрж▓рзЗржЦ ржирзЗржЗ'}
                </p>
              </div>
            )}
            
            <div className="flex items-center justify-between">
              {isEditing ? (
                <div className="flex-1">
                  <label className="block text-sm font-medium mb-1">рж░рзЛржЧрзЗрж░ ржирж╛ржо:</label>
                  <input
                    type="text"
                    value={editableDiagnosis?.disease || ''}
                    onChange={(e) => updateEditableDiagnosis('disease', e.target.value)}
                    className="w-full p-2 border rounded-md"
                  />
                </div>
              ) : (
                <h3 className="text-xl font-semibold">{diagnosis.disease}</h3>
              )}
              {/* <Badge variant={diagnosis.confidence > 70 ? "default" : "secondary"}>
                {diagnosis.confidence}% ржирж┐рж╢рзНржЪрж┐ржд
              </Badge> */}
            </div>

            <Alert>
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                <strong>рж╕рзБржкрж╛рж░рж┐рж╢ржХрзГржд ржЪрж┐ржХрж┐рзОрж╕рж╛:</strong>
                {isEditing ? (
                  <textarea
                    value={editableDiagnosis?.treatment || ''}
                    onChange={(e) => updateEditableDiagnosis('treatment', e.target.value)}
                    className="w-full mt-2 p-2 border rounded-md"
                    rows={3}
                  />
                ) : (
                  ` ${diagnosis.treatment}`
                )}
              </AlertDescription>
            </Alert>

            <div className="bg-gray-50 p-4 rounded-lg">
              <h4 className="font-semibold mb-2">ржбрзЛржЬ ржУ ржкрзНрж░ржпрж╝рзЛржЧ:</h4>
              {isEditing ? (
                <textarea
                  value={editableDiagnosis?.dosage || ''}
                  onChange={(e) => updateEditableDiagnosis('dosage', e.target.value)}
                  className="w-full p-2 border rounded-md"
                  rows={4}
                />
              ) : (
                <p className="text-sm">{diagnosis.dosage}</p>
              )}
            </div>

            {isEditing && (
              <div className="flex gap-2">
                <Button
                  onClick={() => saveDiagnosticToDatabase()}
                  disabled={isSaving}
                  className="flex items-center gap-2"
                >
                  <Save className="h-4 w-4" />
                  {isSaving ? 'рж╕ржВрж░ржХрзНрж╖ржг рж╣ржЪрзНржЫрзЗ...' : 'рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи'}
                </Button>
                <Button
                  variant="outline"
                  onClick={cancelEditing}
                  className="flex items-center gap-2 text-white"
                >
                  <X className="h-4 w-4" />
                  ржмрж╛рждрж┐рж▓
                </Button>
              </div>
            )}

            {savedDiagnostic && !isEditing && (
              <div className="bg-green-50 p-4 rounded-lg">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-green-800 font-medium">ржЪрж┐ржХрж┐рзОрж╕рж╛ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ</p>
                    <p className="text-sm text-green-600">
                      рж╕ржВрж░ржХрзНрж╖ржгрзЗрж░ рж╕ржоржпрж╝: {new Date(savedDiagnostic.created_at).toLocaleString('bn-BD')}
                    </p>
                  </div>
                  <Button
                    onClick={applyTreatment}
                    disabled={savedDiagnostic.is_applied}
                    className="bg-green-600 hover:bg-green-700"
                  >
                    {savedDiagnostic.is_applied ? 'ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкрзНрж░ржпрж╝рзЛржЧ рж╣ржпрж╝рзЗржЫрзЗ' : 'ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рзБржи'}
                  </Button>
                </div>
                {savedDiagnostic.is_applied && savedDiagnostic.applied_at && (
                  <p className="text-sm text-green-600 mt-2">
                    ржкрзНрж░ржпрж╝рзЛржЧрзЗрж░ рж╕ржоржпрж╝: {new Date(savedDiagnostic.applied_at).toLocaleString('bn-BD')}
                  </p>
                )}
              </div>
            )}

            <div className="text-xs text-gray-500 bg-yellow-50 p-3 rounded-lg">
              <strong>рж╕рждрж░рзНржХрждрж╛:</strong> ржПржЯрж┐ ржПржХржЯрж┐ ржкрзНрж░рж╛ржержорж┐ржХ ржбрж╛ржпрж╝рж╛ржЧржирж╕рзНржЯрж┐ржХ ржЯрзБрж▓ред ржЧрзБрж░рзБрждрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ ржПржХржЬржи ржкрж╢рзБржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржиред
            </div>
            
            {diagnosis.confidence < 50 && (
              <div className="text-xs text-blue-600 bg-blue-50 p-3 rounded-lg mt-2">
                <strong>ржкрж░рж╛ржорж░рзНрж╢:</strong> ржирж┐рж╢рзНржЪрж┐ржд рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝рзЗрж░ ржЬржирзНржп ржорж╛ржЗржХрзНрж░рзЛрж╕рзНржХрзЛржкрж┐ржХ ржкрж░рзАржХрзНрж╖рж╛, ржкрж╛ржирж┐ ржорж╛ржи ржкрж░рзАржХрзНрж╖рж╛ ржПржмржВ ржкрж╢рзБржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржиред
              </div>
            )}
            
            {diagnosis.confidence > 80 && (
              <div className="text-xs text-green-600 bg-green-50 p-3 rounded-lg mt-2">
                <strong>рж╕рзБржкрж╛рж░рж┐рж╢:</strong> ржПржЗ рж░рзЛржЧрзЗрж░ ржЬржирзНржп ржЙржкрж░рзЗрж░ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкржжрзНржзрждрж┐ ржЕржирзБрж╕рж░ржг ржХрж░рзБржиред ржЙржирзНржирждрж┐ ржирж╛ рж╣рж▓рзЗ ржкрзБржирж░рж╛ржпрж╝ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржиред
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
}
