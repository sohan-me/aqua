# Generated by Django 5.2.6 on 2025-09-21 12:55

import django.core.validators
import django.db.models.deletion
import mptt.fields
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExpenseType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(choices=[('feed', 'Feed'), ('medicine', 'Medicine'), ('equipment', 'Equipment'), ('labor', 'Labor'), ('utilities', 'Utilities'), ('maintenance', 'Maintenance'), ('other', 'Other')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='FeedingBand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('min_weight_g', models.DecimalField(decimal_places=2, max_digits=10)),
                ('max_weight_g', models.DecimalField(decimal_places=2, max_digits=10)),
                ('feeding_rate_percent', models.DecimalField(decimal_places=2, help_text='Feeding rate as % of body weight', max_digits=5)),
                ('frequency_per_day', models.PositiveIntegerField(default=1)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['min_weight_g'],
            },
        ),
        migrations.CreateModel(
            name='FeedType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('protein_content', models.DecimalField(blank=True, decimal_places=2, help_text='Protein content %', max_digits=5, null=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='IncomeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(choices=[('harvest', 'Harvest'), ('seedling', 'Seedling'), ('consulting', 'Consulting'), ('equipment_sales', 'Equipment Sales'), ('services', 'Services'), ('other', 'Other')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PaymentTerms',
            fields=[
                ('terms_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='e.g., Net 30, Due on receipt', max_length=100, unique=True)),
                ('day_count', models.PositiveIntegerField(help_text='Number of days for payment')),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Payment Terms',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SampleType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(default='test-tube', help_text='Icon name for UI display', max_length=50)),
                ('color', models.CharField(default='blue', help_text='Color theme for UI display', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Sample Type',
                'verbose_name_plural': 'Sample Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('account_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(blank=True, max_length=50)),
                ('account_type', models.CharField(choices=[('Income', 'Income'), ('Expense', 'Expense'), ('COGS', 'Cost of Goods Sold'), ('Bank', 'Bank'), ('Credit Card', 'Credit Card'), ('Accounts Receivable', 'Accounts Receivable'), ('Accounts Payable', 'Accounts Payable'), ('Other Current Asset', 'Other Current Asset'), ('Other Asset', 'Other Asset'), ('Other Current Liability', 'Other Current Liability'), ('Long Term Liability', 'Long Term Liability'), ('Equity', 'Equity'), ('Fixed Asset', 'Fixed Asset'), ('Other Income', 'Other Income'), ('Other Expense', 'Other Expense')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='fish_farming.account')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['tree_id', 'lft'],
                'unique_together': {('user', 'name', 'parent')},
            },
        ),
        migrations.CreateModel(
            name='Bill',
            fields=[
                ('bill_id', models.AutoField(primary_key=True, serialize=False)),
                ('bill_no', models.CharField(help_text='Vendor reference number', max_length=100)),
                ('bill_date', models.DateField()),
                ('due_date', models.DateField()),
                ('memo', models.TextField(blank=True)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('open_balance', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bills', to=settings.AUTH_USER_MODEL)),
                ('terms', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fish_farming.paymentterms')),
            ],
            options={
                'ordering': ['-bill_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BillPayment',
            fields=[
                ('bill_payment_id', models.AutoField(primary_key=True, serialize=False)),
                ('payment_date', models.DateField()),
                ('memo', models.TextField(blank=True)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('payment_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bill_payments', to='fish_farming.account')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bill_payments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-payment_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='e.g., Digonta, Mynuddin, Ashari-1, Ashari-2', max_length=200)),
                ('type', models.CharField(choices=[('internal_pond', 'Internal Pond'), ('external_buyer', 'External Buyer')], max_length=20)),
                ('contact_person', models.CharField(blank=True, max_length=100)),
                ('phone', models.CharField(blank=True, max_length=50)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('address', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='CustomerPayment',
            fields=[
                ('cust_payment_id', models.AutoField(primary_key=True, serialize=False)),
                ('payment_date', models.DateField()),
                ('amount_total', models.DecimalField(decimal_places=2, max_digits=12)),
                ('memo', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='fish_farming.customer')),
                ('deposit_account', models.ForeignKey(help_text='Set to Undeposited Funds at receipt time', on_delete=django.db.models.deletion.CASCADE, related_name='customer_payments', to='fish_farming.account')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_payments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-payment_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Deposit',
            fields=[
                ('deposit_id', models.AutoField(primary_key=True, serialize=False)),
                ('deposit_date', models.DateField()),
                ('memo', models.TextField(blank=True)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bank_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deposits', to='fish_farming.account')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deposits', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-deposit_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('employee_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('join_date', models.DateField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('terminated', 'Terminated')], default='active', max_length=20)),
                ('salary_base', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('bonus_rules', models.TextField(blank=True)),
                ('benefits_profile', models.TextField(blank=True)),
                ('phone', models.CharField(blank=True, max_length=50)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('address', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employees', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Check',
            fields=[
                ('check_id', models.AutoField(primary_key=True, serialize=False)),
                ('check_no', models.CharField(help_text='Auto-generated check number', max_length=50)),
                ('payee_type', models.CharField(choices=[('VENDOR', 'Vendor'), ('EMPLOYEE', 'Employee'), ('OTHER', 'Other')], max_length=10)),
                ('payee_name', models.CharField(blank=True, help_text='If OTHER', max_length=200)),
                ('check_date', models.DateField()),
                ('address_text', models.TextField(blank=True)),
                ('memo', models.TextField(blank=True)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bank_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checks', to='fish_farming.account')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checks', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='checks', to='fish_farming.employee')),
            ],
            options={
                'ordering': ['-check_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EmployeeDocument',
            fields=[
                ('employee_document_id', models.AutoField(primary_key=True, serialize=False)),
                ('doc_type', models.CharField(help_text='contract, NID, degree, etc.', max_length=100)),
                ('file_ref', models.CharField(help_text='File reference/path', max_length=500)),
                ('issue_date', models.DateField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='fish_farming.employee')),
            ],
            options={
                'ordering': ['employee', 'doc_type'],
            },
        ),
        migrations.CreateModel(
            name='FeedingEvent',
            fields=[
                ('feeding_id', models.AutoField(primary_key=True, serialize=False)),
                ('event_date', models.DateField()),
                ('memo', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feeding_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-event_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InventoryFeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_kg', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('unit_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('supplier', models.CharField(blank=True, max_length=200)),
                ('batch_number', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('feed_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='fish_farming.feedtype')),
            ],
            options={
                'ordering': ['feed_type__name'],
            },
        ),
        migrations.CreateModel(
            name='InventoryTransaction',
            fields=[
                ('inv_txn_id', models.AutoField(primary_key=True, serialize=False)),
                ('txn_type', models.CharField(choices=[('RECEIPT_WITH_BILL', 'Receipt with Bill'), ('RECEIPT_NO_BILL', 'Receipt without Bill'), ('ADJUSTMENT', 'Adjustment'), ('ISSUE_TO_POND', 'Issue to Pond')], max_length=20)),
                ('txn_date', models.DateField()),
                ('memo', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bill', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_transactions', to='fish_farming.bill')),
                ('check_obj', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_transactions', to='fish_farming.check')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-txn_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('invoice_id', models.AutoField(primary_key=True, serialize=False)),
                ('invoice_no', models.CharField(help_text='Auto-generated invoice number', max_length=100)),
                ('invoice_date', models.DateField()),
                ('memo', models.TextField(blank=True)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('open_balance', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='fish_farming.customer')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to=settings.AUTH_USER_MODEL)),
                ('terms', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fish_farming.paymentterms')),
            ],
            options={
                'ordering': ['-invoice_date', '-created_at'],
                'unique_together': {('user', 'invoice_no')},
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('item_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Tilapia, Rui, Feed X, Medicine Y, Net, Boat Rent, etc.', max_length=200)),
                ('item_type', models.CharField(choices=[('inventory_part', 'Inventory Part'), ('non_inventory', 'Non-Inventory'), ('service', 'Service'), ('payment', 'Payment'), ('discount', 'Discount')], max_length=20)),
                ('uom', models.CharField(help_text='kg, pcs, pack, hr, etc.', max_length=20)),
                ('is_species', models.BooleanField(default=False)),
                ('is_feed', models.BooleanField(default=False)),
                ('is_medicine', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('asset_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_items', to='fish_farming.account')),
                ('expense_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expense_items', to='fish_farming.account')),
                ('income_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='income_items', to='fish_farming.account')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='InvoiceLine',
            fields=[
                ('invoice_line_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('qty', models.DecimalField(decimal_places=2, max_digits=10)),
                ('rate', models.DecimalField(decimal_places=2, max_digits=12)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='fish_farming.invoice')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoice_lines', to='fish_farming.item')),
            ],
            options={
                'ordering': ['invoice', 'invoice_line_id'],
            },
        ),
        migrations.CreateModel(
            name='InventoryTransactionLine',
            fields=[
                ('inv_txn_line_id', models.AutoField(primary_key=True, serialize=False)),
                ('qty', models.DecimalField(decimal_places=2, help_text='Positive for receipt, negative for issue', max_digits=10)),
                ('unit_cost', models.DecimalField(decimal_places=2, max_digits=12)),
                ('memo', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('inventory_transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='fish_farming.inventorytransaction')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_lines', to='fish_farming.item')),
            ],
            options={
                'ordering': ['inventory_transaction', 'inv_txn_line_id'],
            },
        ),
        migrations.CreateModel(
            name='FeedingLine',
            fields=[
                ('feeding_line_id', models.AutoField(primary_key=True, serialize=False)),
                ('qty', models.DecimalField(decimal_places=2, help_text='Quantity in kg', max_digits=10)),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('water_temp_c', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('water_ph', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('water_do', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('memo', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('feeding_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='fish_farming.feedingevent')),
                ('inv_txn_line', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feeding_lines', to='fish_farming.inventorytransactionline')),
                ('item', models.ForeignKey(help_text='Feed item', on_delete=django.db.models.deletion.CASCADE, related_name='feeding_lines', to='fish_farming.item')),
            ],
            options={
                'ordering': ['feeding_event', 'feeding_line_id'],
            },
        ),
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
                ('je_id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('memo', models.TextField(blank=True)),
                ('source', models.CharField(choices=[('BILL', 'Bill'), ('BILL_PAYMENT', 'Bill Payment'), ('INVOICE', 'Invoice'), ('CUST_PAYMENT', 'Customer Payment'), ('DEPOSIT', 'Deposit'), ('CHECK', 'Check'), ('INVENTORY', 'Inventory'), ('STOCKING_FEED_MED', 'Stocking/Feed/Medicine'), ('MANUAL', 'Manual Entry')], max_length=20)),
                ('source_id', models.PositiveIntegerField(blank=True, help_text='ID of the source document', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='journal_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Journal Entries',
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='inventorytransaction',
            name='journal_entry',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_transactions', to='fish_farming.journalentry'),
        ),
        migrations.CreateModel(
            name='MedicineEvent',
            fields=[
                ('medicine_id', models.AutoField(primary_key=True, serialize=False)),
                ('event_date', models.DateField()),
                ('diagnosis_note', models.TextField(blank=True)),
                ('memo', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medicine_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-event_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MedicineLine',
            fields=[
                ('medicine_line_id', models.AutoField(primary_key=True, serialize=False)),
                ('dosage', models.CharField(help_text='Dosage information', max_length=200)),
                ('qty_used', models.DecimalField(decimal_places=2, help_text='Quantity used', max_digits=10)),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('memo', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('inv_txn_line', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medicine_lines', to='fish_farming.inventorytransactionline')),
                ('item', models.ForeignKey(help_text='Medicine item', on_delete=django.db.models.deletion.CASCADE, related_name='medicine_lines', to='fish_farming.item')),
                ('medicine_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='fish_farming.medicineevent')),
            ],
            options={
                'ordering': ['medicine_event', 'medicine_line_id'],
            },
        ),
        migrations.CreateModel(
            name='OtherPondEvent',
            fields=[
                ('other_event_id', models.AutoField(primary_key=True, serialize=False)),
                ('event_date', models.DateField()),
                ('category', models.CharField(help_text='Free text/tag for event category', max_length=100)),
                ('memo', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='other_pond_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-event_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OtherPondEventLine',
            fields=[
                ('other_event_line_id', models.AutoField(primary_key=True, serialize=False)),
                ('qty', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('memo', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='other_event_lines', to='fish_farming.item')),
                ('other_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='fish_farming.otherpondevent')),
            ],
            options={
                'ordering': ['other_event', 'other_event_line_id'],
            },
        ),
        migrations.CreateModel(
            name='PayrollRun',
            fields=[
                ('payroll_run_id', models.AutoField(primary_key=True, serialize=False)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('pay_date', models.DateField()),
                ('memo', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('approved', 'Approved'), ('paid', 'Paid')], default='draft', max_length=20)),
                ('total_gross', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('total_benefits', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('total_deductions', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('total_net', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payroll_runs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-pay_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Pond',
            fields=[
                ('pond_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='Untitled Pond', help_text='Pond name', max_length=100)),
                ('water_area_decimal', models.DecimalField(decimal_places=3, help_text='Area in decimal units (1 decimal = 40.46 m²)', max_digits=8)),
                ('depth_ft', models.DecimalField(decimal_places=2, help_text='Depth in feet', max_digits=6)),
                ('volume_m3', models.DecimalField(decimal_places=3, help_text='Volume in cubic meters', max_digits=10)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ponds', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.AddField(
            model_name='otherpondevent',
            name='pond',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='other_events', to='fish_farming.pond'),
        ),
        migrations.AddField(
            model_name='medicineevent',
            name='pond',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medicine_events', to='fish_farming.pond'),
        ),
        migrations.CreateModel(
            name='MedicalDiagnostic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disease_name', models.CharField(help_text='Possible Disease', max_length=200)),
                ('confidence_percentage', models.DecimalField(decimal_places=2, help_text='Confidence percentage (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('recommended_treatment', models.TextField(help_text='Recommended Treatment')),
                ('dosage_application', models.TextField(help_text='Dosage and Application')),
                ('selected_organs', models.JSONField(default=list, help_text='Selected organs for diagnosis')),
                ('selected_symptoms', models.JSONField(default=list, help_text='Selected symptoms for diagnosis')),
                ('notes', models.TextField(blank=True, help_text='Additional notes')),
                ('is_applied', models.BooleanField(default=False, help_text='Whether treatment has been applied')),
                ('applied_at', models.DateTimeField(blank=True, help_text='When treatment was applied', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_diagnostics', to=settings.AUTH_USER_MODEL)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_diagnostics', to='fish_farming.pond')),
            ],
            options={
                'verbose_name': 'Medical Diagnostic',
                'verbose_name_plural': 'Medical Diagnostics',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='inventorytransactionline',
            name='pond',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_lines', to='fish_farming.pond'),
        ),
        migrations.AddField(
            model_name='feedingevent',
            name='pond',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feeding_events', to='fish_farming.pond'),
        ),
        migrations.CreateModel(
            name='Feed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount_kg', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('feeding_time', models.TimeField(blank=True, null=True)),
                ('packet_size_kg', models.DecimalField(blank=True, decimal_places=2, help_text='Size of each packet in kg (e.g., 15kg, 25kg)', max_digits=8, null=True)),
                ('cost_per_packet', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per packet of feed', max_digits=8, null=True)),
                ('cost_per_kg', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per kg of feed', max_digits=8, null=True)),
                ('total_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Total cost for this feeding', max_digits=10, null=True)),
                ('consumption_rate_kg_per_day', models.DecimalField(blank=True, decimal_places=2, help_text='Daily consumption rate in kg', max_digits=8, null=True)),
                ('biomass_at_feeding_kg', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated fish biomass at time of feeding', max_digits=10, null=True)),
                ('feeding_rate_percent', models.DecimalField(blank=True, decimal_places=2, help_text='Feeding rate as % of biomass', max_digits=5, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('feed_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feeds', to='fish_farming.feedtype')),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feeds', to='fish_farming.pond')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='EnvAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('adjustment_type', models.CharField(choices=[('water_change', 'Water Change'), ('ph_adjustment', 'pH Adjustment'), ('temperature_control', 'Temperature Control'), ('aeration', 'Aeration'), ('other', 'Other')], max_length=100)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('reason', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='env_adjustments', to='fish_farming.pond')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='CheckItemLine',
            fields=[
                ('check_item_line_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('qty', models.DecimalField(decimal_places=2, max_digits=10)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=12)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('check_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_lines', to='fish_farming.check')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='check_lines', to='fish_farming.item')),
                ('pond', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='check_item_lines', to='fish_farming.pond')),
            ],
            options={
                'ordering': ['check_obj', 'check_item_line_id'],
            },
        ),
        migrations.CreateModel(
            name='CheckExpenseLine',
            fields=[
                ('check_expense_line_id', models.AutoField(primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('memo', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('check_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expense_lines', to='fish_farming.check')),
                ('expense_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='check_expense_lines', to='fish_farming.account')),
                ('pond', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='check_expense_lines', to='fish_farming.pond')),
            ],
            options={
                'ordering': ['check_obj', 'check_expense_line_id'],
            },
        ),
        migrations.CreateModel(
            name='BillLine',
            fields=[
                ('bill_line_id', models.AutoField(primary_key=True, serialize=False)),
                ('is_item', models.BooleanField(default=False, help_text='True if this line is for an item, False for expense')),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('qty', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('line_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('line_memo', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('bill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='fish_farming.bill')),
                ('expense_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bill_expense_lines', to='fish_farming.account')),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bill_lines', to='fish_farming.item')),
                ('pond', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bill_expense_lines', to='fish_farming.pond')),
            ],
            options={
                'ordering': ['bill', 'bill_line_id'],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(max_length=100)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=10)),
                ('message', models.TextField()),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='fish_farming.pond')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Sampling',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('ph', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('temperature_c', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('dissolved_oxygen', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('ammonia', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('nitrite', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('nitrate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('alkalinity', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('hardness', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('turbidity', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('fish_weight_g', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('fish_length_cm', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samplings', to='fish_farming.pond')),
                ('sample_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samplings', to='fish_farming.sampletype')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('scientific_name', models.CharField(blank=True, max_length=150, null=True)),
                ('description', models.TextField(blank=True)),
                ('optimal_temp_min', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('optimal_temp_max', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('optimal_ph_min', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('optimal_ph_max', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='species', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Species',
                'ordering': ['name'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Mortality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('count', models.PositiveIntegerField()),
                ('avg_weight_kg', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True)),
                ('total_weight_kg', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True)),
                ('cause', models.CharField(blank=True, max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mortalities', to='fish_farming.pond')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mortalities', to='fish_farming.species')),
            ],
            options={
                'verbose_name_plural': 'Mortalities',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Income',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('quantity', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('customer', models.CharField(blank=True, max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incomes', to=settings.AUTH_USER_MODEL)),
                ('income_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incomes', to='fish_farming.incometype')),
                ('pond', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='incomes', to='fish_farming.pond')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='incomes', to='fish_farming.species')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Harvest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('total_weight_kg', models.DecimalField(decimal_places=10, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('pieces_per_kg', models.DecimalField(blank=True, decimal_places=10, help_text='Pieces per kg', max_digits=15, null=True)),
                ('price_per_kg', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('avg_weight_kg', models.DecimalField(decimal_places=10, default=0, max_digits=15)),
                ('total_count', models.PositiveIntegerField(blank=True, null=True)),
                ('total_revenue', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='harvests', to='fish_farming.pond')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='harvests', to='fish_farming.species')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='FeedingAdvice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('medical_considerations', models.TextField(blank=True, help_text='Medical considerations and adjustments made to feeding advice')),
                ('medical_warnings', models.JSONField(default=list, help_text='Medical warnings and recommendations for this feeding advice')),
                ('estimated_fish_count', models.PositiveIntegerField(help_text='Estimated number of fish in pond')),
                ('average_fish_weight_kg', models.DecimalField(decimal_places=10, default=0, help_text='Average fish weight in kg', max_digits=15)),
                ('total_biomass_kg', models.DecimalField(decimal_places=10, help_text='Total fish biomass in kg', max_digits=15)),
                ('recommended_feed_kg', models.DecimalField(decimal_places=2, help_text='Recommended daily feed amount in kg', max_digits=8)),
                ('feeding_rate_percent', models.DecimalField(decimal_places=2, help_text='Feeding rate as % of biomass', max_digits=5)),
                ('feeding_frequency', models.PositiveIntegerField(default=2, help_text='Recommended feeding frequency per day')),
                ('water_temp_c', models.DecimalField(blank=True, decimal_places=2, help_text='Water temperature in Celsius', max_digits=5, null=True)),
                ('season', models.CharField(choices=[('spring', 'Spring'), ('summer', 'Summer'), ('autumn', 'Autumn'), ('winter', 'Winter')], default='summer', max_length=20)),
                ('feed_cost_per_kg', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per kg of feed', max_digits=8, null=True)),
                ('daily_feed_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Daily feed cost', max_digits=10, null=True)),
                ('is_applied', models.BooleanField(default=False, help_text='Whether this advice has been applied')),
                ('applied_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes and observations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feeding_advice', to=settings.AUTH_USER_MODEL)),
                ('feed_type', models.ForeignKey(blank=True, help_text='Recommended feed type', null=True, on_delete=django.db.models.deletion.SET_NULL, to='fish_farming.feedtype')),
                ('medical_diagnostics', models.ManyToManyField(blank=True, help_text='Related medical diagnostics that influenced this feeding advice', related_name='feeding_advice', to='fish_farming.medicaldiagnostic')),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feeding_advice', to='fish_farming.pond')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='feeding_advice', to='fish_farming.species')),
            ],
            options={
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('quantity', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('supplier', models.CharField(blank=True, max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to=settings.AUTH_USER_MODEL)),
                ('expense_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='fish_farming.expensetype')),
                ('pond', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='fish_farming.pond')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='fish_farming.species')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='StockingEvent',
            fields=[
                ('stocking_id', models.AutoField(primary_key=True, serialize=False)),
                ('event_date', models.DateField()),
                ('line_summary', models.TextField(blank=True, help_text='Optional summary of stocking lines')),
                ('memo', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stocking_events', to='fish_farming.pond')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stocking_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-event_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StockingLine',
            fields=[
                ('stocking_line_id', models.AutoField(primary_key=True, serialize=False)),
                ('qty_pcs', models.PositiveIntegerField(help_text='Number of pieces stocked')),
                ('pcs_per_kg_at_stocking', models.DecimalField(blank=True, decimal_places=10, help_text='Pieces per kg at stocking', max_digits=15, null=True)),
                ('weight_kg', models.DecimalField(blank=True, decimal_places=10, max_digits=15, null=True)),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('memo', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(help_text='Species/fry item', on_delete=django.db.models.deletion.CASCADE, related_name='stocking_lines', to='fish_farming.item')),
                ('stocking_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='fish_farming.stockingevent')),
            ],
            options={
                'ordering': ['stocking_event', 'stocking_line_id'],
            },
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('treatment_type', models.CharField(max_length=100)),
                ('product_name', models.CharField(max_length=200)),
                ('dosage', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('reason', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatments', to='fish_farming.pond')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('vendor_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('contact_person', models.CharField(blank=True, max_length=100)),
                ('phone', models.CharField(blank=True, max_length=50)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('address', models.TextField(blank=True)),
                ('memo', models.TextField(blank=True)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('terms_default', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vendors', to='fish_farming.paymentterms')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vendors', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='stockingevent',
            name='supplier_vendor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stocking_events', to='fish_farming.vendor'),
        ),
        migrations.CreateModel(
            name='JournalLine',
            fields=[
                ('jl_id', models.AutoField(primary_key=True, serialize=False)),
                ('debit', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('credit', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('memo', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='journal_lines', to='fish_farming.account')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='journal_lines', to='fish_farming.customer')),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='journal_lines', to='fish_farming.item')),
                ('journal_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='fish_farming.journalentry')),
                ('pond', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='journal_lines', to='fish_farming.pond')),
                ('vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='journal_lines', to='fish_farming.vendor')),
            ],
            options={
                'ordering': ['journal_entry', 'jl_id'],
            },
        ),
        migrations.AddField(
            model_name='check',
            name='vendor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='checks', to='fish_farming.vendor'),
        ),
        migrations.AddField(
            model_name='bill',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bills', to='fish_farming.vendor'),
        ),
        migrations.CreateModel(
            name='VendorCategory',
            fields=[
                ('vendor_category_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='fish_farming.vendorcategory')),
            ],
            options={
                'verbose_name_plural': 'Vendor Categories',
                'ordering': ['tree_id', 'lft'],
                'unique_together': {('name', 'parent')},
            },
        ),
        migrations.CreateModel(
            name='VendorVendorCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fish_farming.vendor')),
                ('vendor_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fish_farming.vendorcategory')),
            ],
            options={
                'unique_together': {('vendor', 'vendor_category')},
            },
        ),
        migrations.AddField(
            model_name='vendor',
            name='categories',
            field=models.ManyToManyField(blank=True, through='fish_farming.VendorVendorCategory', to='fish_farming.vendorcategory'),
        ),
        migrations.CreateModel(
            name='BillPaymentApply',
            fields=[
                ('bill_payment_apply_id', models.AutoField(primary_key=True, serialize=False)),
                ('amount_applied', models.DecimalField(decimal_places=2, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('bill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_applies', to='fish_farming.bill')),
                ('bill_payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applies', to='fish_farming.billpayment')),
            ],
            options={
                'ordering': ['bill_payment', 'bill'],
                'unique_together': {('bill_payment', 'bill')},
            },
        ),
        migrations.CreateModel(
            name='DepositLine',
            fields=[
                ('deposit_line_id', models.AutoField(primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('customer_payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deposit_lines', to='fish_farming.customerpayment')),
                ('deposit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='fish_farming.deposit')),
            ],
            options={
                'ordering': ['deposit', 'deposit_line_id'],
                'unique_together': {('deposit', 'customer_payment')},
            },
        ),
        migrations.CreateModel(
            name='CustomerPaymentApply',
            fields=[
                ('cust_payment_apply_id', models.AutoField(primary_key=True, serialize=False)),
                ('amount_applied', models.DecimalField(decimal_places=2, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('customer_payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applies', to='fish_farming.customerpayment')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_applies', to='fish_farming.invoice')),
            ],
            options={
                'ordering': ['customer_payment', 'invoice'],
                'unique_together': {('customer_payment', 'invoice')},
            },
        ),
        migrations.CreateModel(
            name='ItemPrice',
            fields=[
                ('item_price_id', models.AutoField(primary_key=True, serialize=False)),
                ('effective_date', models.DateField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('currency', models.CharField(default='BDT', max_length=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='fish_farming.item')),
            ],
            options={
                'ordering': ['-effective_date'],
                'unique_together': {('item', 'effective_date')},
            },
        ),
        migrations.CreateModel(
            name='PayrollLine',
            fields=[
                ('payroll_line_id', models.AutoField(primary_key=True, serialize=False)),
                ('gross_salary', models.DecimalField(decimal_places=2, max_digits=12)),
                ('benefits', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('deductions', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('net_pay', models.DecimalField(decimal_places=2, max_digits=12)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('check_obj', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payroll_lines', to='fish_farming.check')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payroll_lines', to='fish_farming.employee')),
                ('payment_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payroll_lines', to='fish_farming.account')),
                ('payroll_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='fish_farming.payrollrun')),
            ],
            options={
                'ordering': ['payroll_run', 'employee'],
                'unique_together': {('payroll_run', 'employee')},
            },
        ),
        migrations.CreateModel(
            name='KPIDashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('avg_weight_g', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('total_biomass_kg', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('survival_rate_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('feed_conversion_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('daily_feed_kg', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('water_temp_c', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('ph', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('dissolved_oxygen', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('total_expenses', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('total_income', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('profit_loss', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kpis', to='fish_farming.pond')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('pond', 'date')},
            },
        ),
        migrations.CreateModel(
            name='DailyLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('weather', models.CharField(blank=True, max_length=100)),
                ('water_temp_c', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('ph', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('dissolved_oxygen', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('ammonia', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('nitrite', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_logs', to='fish_farming.pond')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('pond', 'date')},
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100)),
                ('value', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['key'],
                'unique_together': {('user', 'key')},
            },
        ),
        migrations.CreateModel(
            name='FishSampling',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('sample_size', models.PositiveIntegerField(help_text='Number of fish sampled')),
                ('total_weight_kg', models.DecimalField(decimal_places=10, help_text='Total weight of sampled fish in kg', max_digits=15)),
                ('average_weight_kg', models.DecimalField(decimal_places=10, default=0, help_text='Average weight per fish in kg', max_digits=15)),
                ('fish_per_kg', models.DecimalField(decimal_places=10, help_text='Number of fish per kg', max_digits=15)),
                ('growth_rate_kg_per_day', models.DecimalField(blank=True, decimal_places=10, help_text='Daily growth rate in kg', max_digits=15, null=True)),
                ('biomass_difference_kg', models.DecimalField(blank=True, decimal_places=10, help_text='Total biomass difference from previous sampling in kg', max_digits=15, null=True)),
                ('condition_factor', models.DecimalField(blank=True, decimal_places=3, help_text='Fish condition factor', max_digits=8, null=True)),
                ('notes', models.TextField(blank=True, help_text='Observations and notes about the sampling')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fish_samplings', to=settings.AUTH_USER_MODEL)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fish_samplings', to='fish_farming.pond')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fish_samplings', to='fish_farming.species')),
            ],
            options={
                'ordering': ['-date', '-created_at'],
                'unique_together': {('pond', 'species', 'date')},
            },
        ),
        migrations.CreateModel(
            name='Stocking',
            fields=[
                ('stocking_id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('pcs', models.PositiveIntegerField(help_text='Number of pieces stocked')),
                ('pieces_per_kg', models.DecimalField(blank=True, decimal_places=10, help_text='Pieces per kg', max_digits=15, null=True)),
                ('total_weight_kg', models.DecimalField(decimal_places=10, default=0, help_text='Total weight in kg', max_digits=15)),
                ('initial_avg_weight_kg', models.DecimalField(decimal_places=10, default=0, help_text='Initial average weight in kg', max_digits=15)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stockings', to='fish_farming.pond')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stockings', to='fish_farming.species')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('pond', 'species', 'date')},
            },
        ),
        migrations.CreateModel(
            name='SurvivalRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('initial_stocked', models.PositiveIntegerField(help_text='Initial number of fish stocked')),
                ('current_alive', models.PositiveIntegerField(help_text='Current number of alive fish')),
                ('total_mortality', models.PositiveIntegerField(default=0, help_text='Total mortality count')),
                ('total_harvested', models.PositiveIntegerField(default=0, help_text='Total harvested count')),
                ('survival_rate_percent', models.DecimalField(decimal_places=2, help_text='Survival rate percentage', max_digits=5)),
                ('total_survival_kg', models.DecimalField(decimal_places=2, help_text='Total survival weight in kg', max_digits=10)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='survival_rates', to='fish_farming.pond')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='survival_rates', to='fish_farming.species')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('pond', 'species', 'date')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='check',
            unique_together={('user', 'check_no')},
        ),
        migrations.AlterUniqueTogether(
            name='vendor',
            unique_together={('user', 'name')},
        ),
    ]
